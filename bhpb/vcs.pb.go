// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: vcs.proto

package bhpb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GitHostType int32

const (
	GitHostType_GITHOSTTYPE_UNKNOWN GitHostType = 0
	GitHostType_GITHOSTTYPE_GITHUB  GitHostType = 1
	GitHostType_GITHOSTTYPE_GITLAB  GitHostType = 2
	GitHostType_GITHOSTTYPE_OTHER   GitHostType = 3
)

// Enum value maps for GitHostType.
var (
	GitHostType_name = map[int32]string{
		0: "GITHOSTTYPE_UNKNOWN",
		1: "GITHOSTTYPE_GITHUB",
		2: "GITHOSTTYPE_GITLAB",
		3: "GITHOSTTYPE_OTHER",
	}
	GitHostType_value = map[string]int32{
		"GITHOSTTYPE_UNKNOWN": 0,
		"GITHOSTTYPE_GITHUB":  1,
		"GITHOSTTYPE_GITLAB":  2,
		"GITHOSTTYPE_OTHER":   3,
	}
)

func (x GitHostType) Enum() *GitHostType {
	p := new(GitHostType)
	*p = x
	return p
}

func (x GitHostType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GitHostType) Descriptor() protoreflect.EnumDescriptor {
	return file_vcs_proto_enumTypes[0].Descriptor()
}

func (GitHostType) Type() protoreflect.EnumType {
	return &file_vcs_proto_enumTypes[0]
}

func (x GitHostType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GitHostType.Descriptor instead.
func (GitHostType) EnumDescriptor() ([]byte, []int) {
	return file_vcs_proto_rawDescGZIP(), []int{0}
}

type GitOwnerType int32

const (
	GitOwnerType_GITOWNERTYPE_UNKNOWN      GitOwnerType = 0
	GitOwnerType_GITOWNERTYPE_USER         GitOwnerType = 1
	GitOwnerType_GITOWNERTYPE_ORGANIZATION GitOwnerType = 2
)

// Enum value maps for GitOwnerType.
var (
	GitOwnerType_name = map[int32]string{
		0: "GITOWNERTYPE_UNKNOWN",
		1: "GITOWNERTYPE_USER",
		2: "GITOWNERTYPE_ORGANIZATION",
	}
	GitOwnerType_value = map[string]int32{
		"GITOWNERTYPE_UNKNOWN":      0,
		"GITOWNERTYPE_USER":         1,
		"GITOWNERTYPE_ORGANIZATION": 2,
	}
)

func (x GitOwnerType) Enum() *GitOwnerType {
	p := new(GitOwnerType)
	*p = x
	return p
}

func (x GitOwnerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GitOwnerType) Descriptor() protoreflect.EnumDescriptor {
	return file_vcs_proto_enumTypes[1].Descriptor()
}

func (GitOwnerType) Type() protoreflect.EnumType {
	return &file_vcs_proto_enumTypes[1]
}

func (x GitOwnerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GitOwnerType.Descriptor instead.
func (GitOwnerType) EnumDescriptor() ([]byte, []int) {
	return file_vcs_proto_rawDescGZIP(), []int{1}
}

type GitRepoType int32

const (
	GitRepoType_GITREPOTYPE_UNKNOWN GitRepoType = 0
	GitRepoType_GITREPOTYPE_DEFAULT GitRepoType = 1
)

// Enum value maps for GitRepoType.
var (
	GitRepoType_name = map[int32]string{
		0: "GITREPOTYPE_UNKNOWN",
		1: "GITREPOTYPE_DEFAULT",
	}
	GitRepoType_value = map[string]int32{
		"GITREPOTYPE_UNKNOWN": 0,
		"GITREPOTYPE_DEFAULT": 1,
	}
)

func (x GitRepoType) Enum() *GitRepoType {
	p := new(GitRepoType)
	*p = x
	return p
}

func (x GitRepoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GitRepoType) Descriptor() protoreflect.EnumDescriptor {
	return file_vcs_proto_enumTypes[2].Descriptor()
}

func (GitRepoType) Type() protoreflect.EnumType {
	return &file_vcs_proto_enumTypes[2]
}

func (x GitRepoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GitRepoType.Descriptor instead.
func (GitRepoType) EnumDescriptor() ([]byte, []int) {
	return file_vcs_proto_rawDescGZIP(), []int{2}
}

// GitHost is a code hosting provider e.g. GitHub.
type GitHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is assigned by database or hard coded in code
	Id   uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type GitHostType `protobuf:"varint,2,opt,name=type,proto3,enum=bhpb.GitHostType" json:"type,omitempty"`
	// name is the a unique all lower case name e.g. github
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// title is display title e.g. GitHub
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// url prefix for the git host w/o trailing slash. e.g. https://github.com
	Website string `protobuf:"bytes,5,opt,name=website,proto3" json:"website,omitempty"`
	// go import path when using this vcs provider e.g. github.com
	Goimport string `protobuf:"bytes,6,opt,name=goimport,proto3" json:"goimport,omitempty"`
}

func (x *GitHost) Reset() {
	*x = GitHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitHost) ProtoMessage() {}

func (x *GitHost) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitHost.ProtoReflect.Descriptor instead.
func (*GitHost) Descriptor() ([]byte, []int) {
	return file_vcs_proto_rawDescGZIP(), []int{0}
}

func (x *GitHost) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GitHost) GetType() GitHostType {
	if x != nil {
		return x.Type
	}
	return GitHostType_GITHOSTTYPE_UNKNOWN
}

func (x *GitHost) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitHost) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GitHost) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *GitHost) GetGoimport() string {
	if x != nil {
		return x.Goimport
	}
	return ""
}

type GitOwner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is assigned by database
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// type is user or organization
	Type GitOwnerType `protobuf:"varint,2,opt,name=type,proto3,enum=bhpb.GitOwnerType" json:"type,omitempty"`
	// id for host
	HostId uint64 `protobuf:"varint,3,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	// host.name
	Host string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	// e.g. benchhub, at15, gaocegege
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GitOwner) Reset() {
	*x = GitOwner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitOwner) ProtoMessage() {}

func (x *GitOwner) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitOwner.ProtoReflect.Descriptor instead.
func (*GitOwner) Descriptor() ([]byte, []int) {
	return file_vcs_proto_rawDescGZIP(), []int{1}
}

func (x *GitOwner) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GitOwner) GetType() GitOwnerType {
	if x != nil {
		return x.Type
	}
	return GitOwnerType_GITOWNERTYPE_UNKNOWN
}

func (x *GitOwner) GetHostId() uint64 {
	if x != nil {
		return x.HostId
	}
	return 0
}

func (x *GitOwner) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GitOwner) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// GitRepo is a repository
type GitRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is assigned by database
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// reserved, default to 1
	Type GitRepoType `protobuf:"varint,2,opt,name=type,proto3,enum=bhpb.GitRepoType" json:"type,omitempty"`
	// id of owner
	OwnerId uint64 `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// owner.name e.g. github.com/dyweb/gommon has owner == gommon
	Owner string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	// e.g. github.com/dyweb/gommon has name == benchhub
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// go import path when using this repo e.g. github.com/dyweb/gommon
	Goimport string `protobuf:"bytes,6,opt,name=goimport,proto3" json:"goimport,omitempty"`
}

func (x *GitRepo) Reset() {
	*x = GitRepo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitRepo) ProtoMessage() {}

func (x *GitRepo) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitRepo.ProtoReflect.Descriptor instead.
func (*GitRepo) Descriptor() ([]byte, []int) {
	return file_vcs_proto_rawDescGZIP(), []int{2}
}

func (x *GitRepo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GitRepo) GetType() GitRepoType {
	if x != nil {
		return x.Type
	}
	return GitRepoType_GITREPOTYPE_UNKNOWN
}

func (x *GitRepo) GetOwnerId() uint64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *GitRepo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GitRepo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitRepo) GetGoimport() string {
	if x != nil {
		return x.Goimport
	}
	return ""
}

var File_vcs_proto protoreflect.FileDescriptor

var file_vcs_proto_rawDesc = []byte{
	0x0a, 0x09, 0x76, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x62, 0x68, 0x70,
	0x62, 0x22, 0xa0, 0x01, 0x0a, 0x07, 0x47, 0x69, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62, 0x68,
	0x70, 0x62, 0x2e, 0x47, 0x69, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x6f, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x6f, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x08, 0x47, 0x69, 0x74, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x62, 0x68, 0x70, 0x62, 0x2e, 0x47, 0x69, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x07, 0x47,
	0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62, 0x68, 0x70, 0x62, 0x2e, 0x47, 0x69, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x6f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x6f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2a, 0x6d,
	0x0a, 0x0b, 0x47, 0x69, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x13, 0x47, 0x49, 0x54, 0x48, 0x4f, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x49, 0x54, 0x48, 0x4f, 0x53,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x47, 0x49, 0x54, 0x48, 0x4f, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x49,
	0x54, 0x4c, 0x41, 0x42, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x49, 0x54, 0x48, 0x4f, 0x53,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x5e, 0x0a,
	0x0c, 0x47, 0x69, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x14, 0x47, 0x49, 0x54, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x49, 0x54, 0x4f, 0x57,
	0x4e, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x47, 0x49, 0x54, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x2a, 0x3f, 0x0a,
	0x0b, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x47, 0x49, 0x54, 0x52, 0x45, 0x50, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x49, 0x54, 0x52, 0x45, 0x50, 0x4f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x42, 0x23,
	0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x68, 0x75, 0x62, 0x2f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x68, 0x75, 0x62, 0x2f, 0x62,
	0x68, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vcs_proto_rawDescOnce sync.Once
	file_vcs_proto_rawDescData = file_vcs_proto_rawDesc
)

func file_vcs_proto_rawDescGZIP() []byte {
	file_vcs_proto_rawDescOnce.Do(func() {
		file_vcs_proto_rawDescData = protoimpl.X.CompressGZIP(file_vcs_proto_rawDescData)
	})
	return file_vcs_proto_rawDescData
}

var file_vcs_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_vcs_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_vcs_proto_goTypes = []interface{}{
	(GitHostType)(0),  // 0: bhpb.GitHostType
	(GitOwnerType)(0), // 1: bhpb.GitOwnerType
	(GitRepoType)(0),  // 2: bhpb.GitRepoType
	(*GitHost)(nil),   // 3: bhpb.GitHost
	(*GitOwner)(nil),  // 4: bhpb.GitOwner
	(*GitRepo)(nil),   // 5: bhpb.GitRepo
}
var file_vcs_proto_depIdxs = []int32{
	0, // 0: bhpb.GitHost.type:type_name -> bhpb.GitHostType
	1, // 1: bhpb.GitOwner.type:type_name -> bhpb.GitOwnerType
	2, // 2: bhpb.GitRepo.type:type_name -> bhpb.GitRepoType
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_vcs_proto_init() }
func file_vcs_proto_init() {
	if File_vcs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vcs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitOwner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitRepo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vcs_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vcs_proto_goTypes,
		DependencyIndexes: file_vcs_proto_depIdxs,
		EnumInfos:         file_vcs_proto_enumTypes,
		MessageInfos:      file_vcs_proto_msgTypes,
	}.Build()
	File_vcs_proto = out.File
	file_vcs_proto_rawDesc = nil
	file_vcs_proto_goTypes = nil
	file_vcs_proto_depIdxs = nil
}
