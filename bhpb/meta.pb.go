// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: meta.proto

package bhpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BenchmarkType int32

const (
	BenchmarkType_BENCHMARKTYPE_UNKNOWN BenchmarkType = 0
	BenchmarkType_BENCHMARKTYPE_GO      BenchmarkType = 1
	BenchmarkType_BENCHMARKTYPE_XEPHONB BenchmarkType = 2
)

var BenchmarkType_name = map[int32]string{
	0: "BENCHMARKTYPE_UNKNOWN",
	1: "BENCHMARKTYPE_GO",
	2: "BENCHMARKTYPE_XEPHONB",
}

var BenchmarkType_value = map[string]int32{
	"BENCHMARKTYPE_UNKNOWN": 0,
	"BENCHMARKTYPE_GO":      1,
	"BENCHMARKTYPE_XEPHONB": 2,
}

func (x BenchmarkType) String() string {
	return proto.EnumName(BenchmarkType_name, int32(x))
}

func (BenchmarkType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3b5ea8fe65782bcc, []int{0}
}

type Spec struct {
	Id                   int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BenchmarkType        BenchmarkType `protobuf:"varint,2,opt,name=benchmark_type,json=benchmarkType,proto3,enum=bhpb.BenchmarkType" json:"benchmark_type,omitempty"`
	Payload              string        `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	PayloadHash          string        `protobuf:"bytes,4,opt,name=payload_hash,json=payloadHash,proto3" json:"payload_hash,omitempty"`
	CreateTime           int64         `protobuf:"varint,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Spec) Reset()         { *m = Spec{} }
func (m *Spec) String() string { return proto.CompactTextString(m) }
func (*Spec) ProtoMessage()    {}
func (*Spec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5ea8fe65782bcc, []int{0}
}
func (m *Spec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Spec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Spec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Spec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Spec.Merge(m, src)
}
func (m *Spec) XXX_Size() int {
	return m.Size()
}
func (m *Spec) XXX_DiscardUnknown() {
	xxx_messageInfo_Spec.DiscardUnknown(m)
}

var xxx_messageInfo_Spec proto.InternalMessageInfo

type Job struct {
	Id                   int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SpecId               int64         `protobuf:"varint,2,opt,name=spec_id,json=specId,proto3" json:"spec_id,omitempty"`
	BenchmarkType        BenchmarkType `protobuf:"varint,3,opt,name=benchmark_type,json=benchmarkType,proto3,enum=bhpb.BenchmarkType" json:"benchmark_type,omitempty"`
	SubmitTime           int64         `protobuf:"varint,4,opt,name=submit_time,json=submitTime,proto3" json:"submit_time,omitempty"`
	ReportTime           int64         `protobuf:"varint,5,opt,name=report_time,json=reportTime,proto3" json:"report_time,omitempty"`
	StartTime            int64         `protobuf:"varint,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime           int64         `protobuf:"varint,7,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5ea8fe65782bcc, []int{1}
}
func (m *Job) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Job.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return m.Size()
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("bhpb.BenchmarkType", BenchmarkType_name, BenchmarkType_value)
	proto.RegisterType((*Spec)(nil), "bhpb.Spec")
	proto.RegisterType((*Job)(nil), "bhpb.Job")
}

func init() { proto.RegisterFile("meta.proto", fileDescriptor_3b5ea8fe65782bcc) }

var fileDescriptor_3b5ea8fe65782bcc = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcd, 0x8e, 0xd3, 0x30,
	0x14, 0x85, 0xc7, 0x49, 0x68, 0x35, 0xb7, 0x33, 0x55, 0x64, 0xfe, 0xc2, 0x48, 0x64, 0xca, 0xac,
	0x2a, 0x24, 0x52, 0x09, 0x76, 0xec, 0x08, 0xaa, 0x28, 0x54, 0xa4, 0x55, 0x28, 0xe2, 0x6f, 0x11,
	0xd9, 0x89, 0xdb, 0x58, 0xe0, 0xda, 0x4a, 0xdc, 0x45, 0xdf, 0x8a, 0xc7, 0xe8, 0x92, 0x47, 0x80,
	0xae, 0x79, 0x08, 0x14, 0xbb, 0x91, 0xa8, 0xca, 0x82, 0x9d, 0xcf, 0x39, 0xf7, 0xc8, 0xdf, 0x95,
	0x2e, 0x80, 0x60, 0x9a, 0x44, 0xaa, 0x92, 0x5a, 0x62, 0x8f, 0x96, 0x8a, 0x5e, 0x3d, 0x59, 0x71,
	0x5d, 0x6e, 0x68, 0x94, 0x4b, 0x31, 0x5a, 0xc9, 0x95, 0x1c, 0x99, 0x90, 0x6e, 0x96, 0x46, 0x19,
	0x61, 0x5e, 0xb6, 0x74, 0x75, 0x91, 0x4b, 0x21, 0xe4, 0xda, 0xaa, 0x9b, 0xef, 0x08, 0xbc, 0x77,
	0x8a, 0xe5, 0xb8, 0x0f, 0x0e, 0x2f, 0x02, 0x34, 0x40, 0x43, 0x37, 0x75, 0x78, 0x81, 0x9f, 0x43,
	0x9f, 0xb2, 0x75, 0x5e, 0x0a, 0x52, 0x7d, 0xcd, 0xf4, 0x56, 0xb1, 0xc0, 0x19, 0xa0, 0x61, 0xff,
	0xe9, 0xed, 0xa8, 0xf9, 0x34, 0x8a, 0xdb, 0x6c, 0xb1, 0x55, 0x2c, 0xbd, 0xa4, 0x7f, 0x4b, 0x1c,
	0x40, 0x57, 0x91, 0xed, 0x37, 0x49, 0x8a, 0xc0, 0x1d, 0xa0, 0xe1, 0x79, 0xda, 0x4a, 0xfc, 0x08,
	0x2e, 0x0e, 0xcf, 0xac, 0x24, 0x75, 0x19, 0x78, 0x26, 0xee, 0x1d, 0xbc, 0x09, 0xa9, 0x4b, 0x7c,
	0x0d, 0xbd, 0xbc, 0x62, 0x44, 0xb3, 0x4c, 0x73, 0xc1, 0x82, 0x5b, 0x86, 0x08, 0xac, 0xb5, 0xe0,
	0x82, 0xdd, 0xfc, 0x46, 0xe0, 0xbe, 0x91, 0xf4, 0x84, 0xf8, 0x3e, 0x74, 0x6b, 0xc5, 0xf2, 0x8c,
	0x17, 0x06, 0xd5, 0x4d, 0x3b, 0x8d, 0x7c, 0xfd, 0xaf, 0x55, 0xdc, 0xff, 0x5e, 0xe5, 0x1a, 0x7a,
	0xf5, 0x86, 0x0a, 0xae, 0x2d, 0x8d, 0x67, 0x69, 0xac, 0xd5, 0xd0, 0x34, 0x03, 0x15, 0x53, 0xb2,
	0xd2, 0x47, 0xb8, 0xd6, 0x32, 0x03, 0x0f, 0x01, 0x6a, 0x4d, 0xda, 0xbc, 0x63, 0xf2, 0x73, 0xe3,
	0xb4, 0xfd, 0x25, 0x5f, 0xf3, 0xba, 0xb4, 0x79, 0xd7, 0xf6, 0xad, 0xd5, 0x0c, 0x3c, 0xfe, 0x02,
	0x97, 0x47, 0x84, 0xf8, 0x01, 0xdc, 0x8d, 0xc7, 0xc9, 0xcb, 0xc9, 0xdb, 0x17, 0xe9, 0x74, 0xf1,
	0x69, 0x3e, 0xce, 0xde, 0x27, 0xd3, 0x64, 0xf6, 0x21, 0xf1, 0xcf, 0xf0, 0x1d, 0xf0, 0x8f, 0xa3,
	0x57, 0x33, 0x1f, 0x9d, 0x16, 0x3e, 0x8e, 0xe7, 0x93, 0x59, 0x12, 0xfb, 0x4e, 0x7c, 0x6f, 0xf7,
	0x2b, 0x3c, 0xdb, 0xed, 0x43, 0xf4, 0x63, 0x1f, 0xa2, 0x9f, 0xfb, 0x10, 0x7d, 0x36, 0x37, 0x45,
	0x3b, 0xe6, 0x3a, 0x9e, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x06, 0xb9, 0x93, 0xf1, 0x6e, 0x02,
	0x00, 0x00,
}

func (m *Spec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Spec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Spec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreateTime != 0 {
		i = encodeVarintMeta(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.PayloadHash) > 0 {
		i -= len(m.PayloadHash)
		copy(dAtA[i:], m.PayloadHash)
		i = encodeVarintMeta(dAtA, i, uint64(len(m.PayloadHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BenchmarkType != 0 {
		i = encodeVarintMeta(dAtA, i, uint64(m.BenchmarkType))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintMeta(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Job) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Job) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Job) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FinishTime != 0 {
		i = encodeVarintMeta(dAtA, i, uint64(m.FinishTime))
		i--
		dAtA[i] = 0x38
	}
	if m.StartTime != 0 {
		i = encodeVarintMeta(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x30
	}
	if m.ReportTime != 0 {
		i = encodeVarintMeta(dAtA, i, uint64(m.ReportTime))
		i--
		dAtA[i] = 0x28
	}
	if m.SubmitTime != 0 {
		i = encodeVarintMeta(dAtA, i, uint64(m.SubmitTime))
		i--
		dAtA[i] = 0x20
	}
	if m.BenchmarkType != 0 {
		i = encodeVarintMeta(dAtA, i, uint64(m.BenchmarkType))
		i--
		dAtA[i] = 0x18
	}
	if m.SpecId != 0 {
		i = encodeVarintMeta(dAtA, i, uint64(m.SpecId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintMeta(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMeta(dAtA []byte, offset int, v uint64) int {
	offset -= sovMeta(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Spec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMeta(uint64(m.Id))
	}
	if m.BenchmarkType != 0 {
		n += 1 + sovMeta(uint64(m.BenchmarkType))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.PayloadHash)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	if m.CreateTime != 0 {
		n += 1 + sovMeta(uint64(m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Job) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMeta(uint64(m.Id))
	}
	if m.SpecId != 0 {
		n += 1 + sovMeta(uint64(m.SpecId))
	}
	if m.BenchmarkType != 0 {
		n += 1 + sovMeta(uint64(m.BenchmarkType))
	}
	if m.SubmitTime != 0 {
		n += 1 + sovMeta(uint64(m.SubmitTime))
	}
	if m.ReportTime != 0 {
		n += 1 + sovMeta(uint64(m.ReportTime))
	}
	if m.StartTime != 0 {
		n += 1 + sovMeta(uint64(m.StartTime))
	}
	if m.FinishTime != 0 {
		n += 1 + sovMeta(uint64(m.FinishTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMeta(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMeta(x uint64) (n int) {
	return sovMeta(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Spec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Spec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Spec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BenchmarkType", wireType)
			}
			m.BenchmarkType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BenchmarkType |= BenchmarkType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMeta
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMeta
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayloadHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Job) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Job: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Job: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecId", wireType)
			}
			m.SpecId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpecId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BenchmarkType", wireType)
			}
			m.BenchmarkType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BenchmarkType |= BenchmarkType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitTime", wireType)
			}
			m.SubmitTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubmitTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportTime", wireType)
			}
			m.ReportTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTime", wireType)
			}
			m.FinishTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMeta(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMeta
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMeta
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMeta
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMeta        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMeta          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMeta = fmt.Errorf("proto: unexpected end of group")
)
