// protoc --proto_path=/home/at15/workspace/src/:. --gogo_out=. types.proto
syntax = "proto3";
package bhcommon;

option go_package = "commonpb";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

message Ping {
    string message = 1;
}

message Pong {
    string message = 1;
}

// ----- start of node -------------

// node state, used in
//
// heartbeat with central
// http api for UI
// tag monitoring data
enum NodeState {
    UNKNOWN_STATE = 0;
    FINDING_CENTRAL = 1;
    IDLE = 2;
    JOB_WAITING_PEERS = 4;
    JOB_RUNNING = 5;
    JOB_REPORTING = 6;
    JOB_CLEANUP = 7;
}

message NodeStatus {
    NodeState state = 1;
    NodeCapacity capacity = 2 [(gogoproto.nullable) = false];
}

// used for register
message Node {
    // addr grpc server listens on i.e. :6081
    string bindAdrr = 1;
    // ip grpc server listens on, sometime it's empty for 0.0.0.0
    string bindIp = 2;
    // port grpc server listens on, addr without the ip part
    int64 bindPort = 3;
    // remoteAddr that server sees when this node act as client, the ip is accurate, but the port is random, not the listen port
    string remoteAddr = 4;
    // TODO: how does one node know its ip without call external service .... https://github.com/benchhub/benchhub/issues/18

    // self generated uid, used through a node agent's lifetime, change after process restart https://github.com/benchhub/benchhub/issues/17
    string uid = 5;
    // hostname
    string host = 6;
    // unix timestamp when process start
    int64 startTime = 7;
    int64 bootTime = 8;

    NodeCapacity capacity = 9 [(gogoproto.nullable) = false];
    NodeProvider provider = 10 [(gogoproto.nullable) = false];
    NodeRole role = 11 [(gogoproto.nullable) = false];
}

message NodeCapacity {
    // number of cpu cores
    int32 cores = 1;
    // free memory in MB
    int32 memoryFree = 2;
    // total memory in MB
    int32 memoryTotal = 3;
    // free disk space in MB
    int32 diskFree = 4;
    // total disk space in MB
    int32 diskTotal = 5;
}

// NOTE: we don't need region code now because there is no cross datacenter and cross service provider deployment
//enum Region {
//    // NOTE: we add the ugly REGION suffix because name of enum should be uinquie inside whole proto file, not just the
//    // enum that declared it, the generated go would have constant with Region prefix ....
//    UNKNOWN_REGION = 0;
//    LOCAL_REGION = 1; // local dev environment
//    US_EAST_REGION = 2;
//    US_WEST_REGION = 3;
//    CN_REGION = 4;
//}

enum Provider {
    UNKNOWN_PROVIDER = 0;
    LOCAL_PROVIDER = 1; // local dev environment
    VAGRANT_PROVIDER = 2; // vagrant, mostly local
    ALI_PROVIDER = 3;
    AWS_PROVIDER = 4;
    AZURE_PROVIDER = 5;
    GCP_PROVIDER = 6;
    PACKET_PROVIDER = 7;
}

message NodeProvider {
    //    Provider code = 1;
    //    Region regionCode = 2;
    string name = 1;
    string region = 2;
    string instance = 3;
}

enum Role {
    UNKNOWN_ROLE = 0;
    ANY = 1; // 随便 都行
    CENTRAL = 2;
    LOADER = 3;
    DATABASE = 4;
}

message NodeRole {
    Role preferred = 1;
    Role current = 2;
    Role previous = 3;
}

message NodePrice {
    double MachinePerHour = 1;
    double StoragePerGB = 2;
    double OutboundPerMB = 3; // TODO: not sure about the network pricing model, though for benchmark, most stuff is inside the datacenter (VPC)
}

// ----- end of node -------------

// ----- start of job ------
message Job {
    // TODO: job should have much more info
    string id = 1;
}
// ----- end of job ------