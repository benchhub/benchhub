// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types.proto

/*
	Package commonpb is a generated protocol buffer package.

	It is generated from these files:
		types.proto

	It has these top-level messages:
		Ping
		Pong
		NodeStatus
		Node
		NodeCapacity
		NodeProvider
		NodeRole
		Job
*/
package commonpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// node state, used in
//
// heartbeat with central
// http api for UI
// tag monitoring data
type NodeState int32

const (
	NodeState_UNKNOWN_STATE        NodeState = 0
	NodeState_FINDING_CENTRAL      NodeState = 1
	NodeState_WAITING_JOB          NodeState = 2
	NodeState_PROVISIONING_JOB_ENV NodeState = 3
	NodeState_WAITING_PEERS        NodeState = 4
	NodeState_RUNNING_JOB          NodeState = 5
	NodeState_SENDING_METRICS      NodeState = 6
	NodeState_CLEANUP_JOB_ENV      NodeState = 7
)

var NodeState_name = map[int32]string{
	0: "UNKNOWN_STATE",
	1: "FINDING_CENTRAL",
	2: "WAITING_JOB",
	3: "PROVISIONING_JOB_ENV",
	4: "WAITING_PEERS",
	5: "RUNNING_JOB",
	6: "SENDING_METRICS",
	7: "CLEANUP_JOB_ENV",
}
var NodeState_value = map[string]int32{
	"UNKNOWN_STATE":        0,
	"FINDING_CENTRAL":      1,
	"WAITING_JOB":          2,
	"PROVISIONING_JOB_ENV": 3,
	"WAITING_PEERS":        4,
	"RUNNING_JOB":          5,
	"SENDING_METRICS":      6,
	"CLEANUP_JOB_ENV":      7,
}

func (x NodeState) String() string {
	return proto.EnumName(NodeState_name, int32(x))
}
func (NodeState) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type Region int32

const (
	// NOTE: we add the ugly REGION suffix because name of enum should be uinquie inside whole proto file, not just the
	// enum that declared it, the generated go would have constant with Region prefix ....
	Region_UNKNOWN_REGION Region = 0
	Region_LOCAL_REGION   Region = 1
	Region_US_EAST_REGION Region = 2
	Region_US_WEST_REGION Region = 3
	Region_CN_REGION      Region = 4
)

var Region_name = map[int32]string{
	0: "UNKNOWN_REGION",
	1: "LOCAL_REGION",
	2: "US_EAST_REGION",
	3: "US_WEST_REGION",
	4: "CN_REGION",
}
var Region_value = map[string]int32{
	"UNKNOWN_REGION": 0,
	"LOCAL_REGION":   1,
	"US_EAST_REGION": 2,
	"US_WEST_REGION": 3,
	"CN_REGION":      4,
}

func (x Region) String() string {
	return proto.EnumName(Region_name, int32(x))
}
func (Region) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

type Provider int32

const (
	Provider_UNKNOWN_PROVIDER Provider = 0
	Provider_LOCAL_PROVIDER   Provider = 1
	Provider_VAGRANT_PROVIDER Provider = 2
	Provider_ALI_PROVIDER     Provider = 3
	Provider_AWS_PROVIDER     Provider = 4
	Provider_AZURE_PROVIDER   Provider = 5
	Provider_GCP_PROVIDER     Provider = 6
	Provider_PACKET_PROVIDER  Provider = 7
)

var Provider_name = map[int32]string{
	0: "UNKNOWN_PROVIDER",
	1: "LOCAL_PROVIDER",
	2: "VAGRANT_PROVIDER",
	3: "ALI_PROVIDER",
	4: "AWS_PROVIDER",
	5: "AZURE_PROVIDER",
	6: "GCP_PROVIDER",
	7: "PACKET_PROVIDER",
}
var Provider_value = map[string]int32{
	"UNKNOWN_PROVIDER": 0,
	"LOCAL_PROVIDER":   1,
	"VAGRANT_PROVIDER": 2,
	"ALI_PROVIDER":     3,
	"AWS_PROVIDER":     4,
	"AZURE_PROVIDER":   5,
	"GCP_PROVIDER":     6,
	"PACKET_PROVIDER":  7,
}

func (x Provider) String() string {
	return proto.EnumName(Provider_name, int32(x))
}
func (Provider) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

type Role int32

const (
	Role_UNKNOWN_ROLE       Role = 0
	Role_ANY_ROLE           Role = 1
	Role_WORKLOAD_GENERATOR Role = 2
	Role_DATABASE_RUNNER    Role = 3
)

var Role_name = map[int32]string{
	0: "UNKNOWN_ROLE",
	1: "ANY_ROLE",
	2: "WORKLOAD_GENERATOR",
	3: "DATABASE_RUNNER",
}
var Role_value = map[string]int32{
	"UNKNOWN_ROLE":       0,
	"ANY_ROLE":           1,
	"WORKLOAD_GENERATOR": 2,
	"DATABASE_RUNNER":    3,
}

func (x Role) String() string {
	return proto.EnumName(Role_name, int32(x))
}
func (Role) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

type Ping struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type Pong struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

type NodeStatus struct {
	State    NodeState    `protobuf:"varint,1,opt,name=state,proto3,enum=bhcommon.NodeState" json:"state,omitempty"`
	Capacity NodeCapacity `protobuf:"bytes,2,opt,name=capacity" json:"capacity"`
}

func (m *NodeStatus) Reset()                    { *m = NodeStatus{} }
func (m *NodeStatus) String() string            { return proto.CompactTextString(m) }
func (*NodeStatus) ProtoMessage()               {}
func (*NodeStatus) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

// used for register
type Node struct {
	// addr that the node's grpc server listens on i.e. :6081
	ListenAdrr string `protobuf:"bytes,1,opt,name=listenAdrr,proto3" json:"listenAdrr,omitempty"`
	// TODO: how does one node know its ip? ....
	Ip   string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port int64  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// self generated uuid, used through a node agent's lifetime, lost when restart
	Uid int64 `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	// hostname
	Host string `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	// unix timestamp
	StartTime int64        `protobuf:"varint,6,opt,name=startTime,proto3" json:"startTime,omitempty"`
	Capacity  NodeCapacity `protobuf:"bytes,7,opt,name=capacity" json:"capacity"`
	Provider  NodeProvider `protobuf:"bytes,8,opt,name=provider" json:"provider"`
	Role      NodeRole     `protobuf:"bytes,9,opt,name=role" json:"role"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

type NodeCapacity struct {
	// number of cpu cores
	Cores int32 `protobuf:"varint,1,opt,name=cores,proto3" json:"cores,omitempty"`
	// free memory in MB
	MemoryFree int32 `protobuf:"varint,2,opt,name=memoryFree,proto3" json:"memoryFree,omitempty"`
	// total memory in MB
	MemoryTotal int32 `protobuf:"varint,3,opt,name=memoryTotal,proto3" json:"memoryTotal,omitempty"`
	// free disk space in GB
	DiskFree int32 `protobuf:"varint,4,opt,name=diskFree,proto3" json:"diskFree,omitempty"`
	// total disk space in GB
	DiskTotal int32 `protobuf:"varint,5,opt,name=diskTotal,proto3" json:"diskTotal,omitempty"`
}

func (m *NodeCapacity) Reset()                    { *m = NodeCapacity{} }
func (m *NodeCapacity) String() string            { return proto.CompactTextString(m) }
func (*NodeCapacity) ProtoMessage()               {}
func (*NodeCapacity) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

type NodeProvider struct {
	Code       Provider `protobuf:"varint,1,opt,name=code,proto3,enum=bhcommon.Provider" json:"code,omitempty"`
	RegionCode Region   `protobuf:"varint,2,opt,name=regionCode,proto3,enum=bhcommon.Region" json:"regionCode,omitempty"`
	Name       string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Region     string   `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
}

func (m *NodeProvider) Reset()                    { *m = NodeProvider{} }
func (m *NodeProvider) String() string            { return proto.CompactTextString(m) }
func (*NodeProvider) ProtoMessage()               {}
func (*NodeProvider) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

type NodeRole struct {
	Preferred Role `protobuf:"varint,1,opt,name=preferred,proto3,enum=bhcommon.Role" json:"preferred,omitempty"`
	Current   Role `protobuf:"varint,2,opt,name=current,proto3,enum=bhcommon.Role" json:"current,omitempty"`
	Previous  Role `protobuf:"varint,3,opt,name=previous,proto3,enum=bhcommon.Role" json:"previous,omitempty"`
}

func (m *NodeRole) Reset()                    { *m = NodeRole{} }
func (m *NodeRole) String() string            { return proto.CompactTextString(m) }
func (*NodeRole) ProtoMessage()               {}
func (*NodeRole) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

// ----- start of job ------
type Job struct {
	// TODO: job should have much more info
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

func init() {
	proto.RegisterType((*Ping)(nil), "bhcommon.Ping")
	proto.RegisterType((*Pong)(nil), "bhcommon.Pong")
	proto.RegisterType((*NodeStatus)(nil), "bhcommon.NodeStatus")
	proto.RegisterType((*Node)(nil), "bhcommon.Node")
	proto.RegisterType((*NodeCapacity)(nil), "bhcommon.NodeCapacity")
	proto.RegisterType((*NodeProvider)(nil), "bhcommon.NodeProvider")
	proto.RegisterType((*NodeRole)(nil), "bhcommon.NodeRole")
	proto.RegisterType((*Job)(nil), "bhcommon.Job")
	proto.RegisterEnum("bhcommon.NodeState", NodeState_name, NodeState_value)
	proto.RegisterEnum("bhcommon.Region", Region_name, Region_value)
	proto.RegisterEnum("bhcommon.Provider", Provider_name, Provider_value)
	proto.RegisterEnum("bhcommon.Role", Role_name, Role_value)
}
func (m *Ping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ping) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *Pong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pong) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *NodeStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.Capacity.Size()))
	n1, err := m.Capacity.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ListenAdrr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ListenAdrr)))
		i += copy(dAtA[i:], m.ListenAdrr)
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.Port != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Uid))
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.StartTime))
	}
	dAtA[i] = 0x3a
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.Capacity.Size()))
	n2, err := m.Capacity.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x42
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.Provider.Size()))
	n3, err := m.Provider.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x4a
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.Role.Size()))
	n4, err := m.Role.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *NodeCapacity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeCapacity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cores != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Cores))
	}
	if m.MemoryFree != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MemoryFree))
	}
	if m.MemoryTotal != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MemoryTotal))
	}
	if m.DiskFree != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DiskFree))
	}
	if m.DiskTotal != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DiskTotal))
	}
	return i, nil
}

func (m *NodeProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeProvider) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Code))
	}
	if m.RegionCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RegionCode))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Region) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Region)))
		i += copy(dAtA[i:], m.Region)
	}
	return i, nil
}

func (m *NodeRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeRole) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Preferred != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Preferred))
	}
	if m.Current != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Current))
	}
	if m.Previous != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Previous))
	}
	return i, nil
}

func (m *Job) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Job) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Ping) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Pong) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *NodeStatus) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovTypes(uint64(m.State))
	}
	l = m.Capacity.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *Node) Size() (n int) {
	var l int
	_ = l
	l = len(m.ListenAdrr)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	if m.Uid != 0 {
		n += 1 + sovTypes(uint64(m.Uid))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovTypes(uint64(m.StartTime))
	}
	l = m.Capacity.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Provider.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Role.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *NodeCapacity) Size() (n int) {
	var l int
	_ = l
	if m.Cores != 0 {
		n += 1 + sovTypes(uint64(m.Cores))
	}
	if m.MemoryFree != 0 {
		n += 1 + sovTypes(uint64(m.MemoryFree))
	}
	if m.MemoryTotal != 0 {
		n += 1 + sovTypes(uint64(m.MemoryTotal))
	}
	if m.DiskFree != 0 {
		n += 1 + sovTypes(uint64(m.DiskFree))
	}
	if m.DiskTotal != 0 {
		n += 1 + sovTypes(uint64(m.DiskTotal))
	}
	return n
}

func (m *NodeProvider) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovTypes(uint64(m.Code))
	}
	if m.RegionCode != 0 {
		n += 1 + sovTypes(uint64(m.RegionCode))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *NodeRole) Size() (n int) {
	var l int
	_ = l
	if m.Preferred != 0 {
		n += 1 + sovTypes(uint64(m.Preferred))
	}
	if m.Current != 0 {
		n += 1 + sovTypes(uint64(m.Current))
	}
	if m.Previous != 0 {
		n += 1 + sovTypes(uint64(m.Previous))
	}
	return n
}

func (m *Job) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (NodeState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Capacity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenAdrr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListenAdrr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Capacity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Provider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Role.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeCapacity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeCapacity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeCapacity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cores", wireType)
			}
			m.Cores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cores |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryFree", wireType)
			}
			m.MemoryFree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryFree |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryTotal", wireType)
			}
			m.MemoryTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryTotal |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskFree", wireType)
			}
			m.DiskFree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskFree |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskTotal", wireType)
			}
			m.DiskTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskTotal |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (Provider(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionCode", wireType)
			}
			m.RegionCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionCode |= (Region(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preferred", wireType)
			}
			m.Preferred = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Preferred |= (Role(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
			m.Current = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Current |= (Role(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Previous", wireType)
			}
			m.Previous = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Previous |= (Role(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Job) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Job: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Job: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 837 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xcf, 0x6e, 0xeb, 0x44,
	0x14, 0xc6, 0x63, 0xc7, 0x4e, 0xe2, 0xd3, 0xde, 0xd6, 0x4c, 0x4b, 0x65, 0x55, 0x28, 0x44, 0x59,
	0xa0, 0x12, 0x5d, 0x7a, 0xd1, 0x65, 0xc3, 0x76, 0xea, 0xce, 0x8d, 0x72, 0x1b, 0xec, 0x68, 0xec,
	0x36, 0xe2, 0x6e, 0xa2, 0x24, 0x9e, 0x9b, 0x5a, 0x24, 0x19, 0x33, 0x76, 0xae, 0xd4, 0x97, 0x60,
	0xc5, 0x03, 0xb0, 0x45, 0x62, 0xc1, 0x63, 0x74, 0xc9, 0x13, 0x20, 0xe8, 0x93, 0xa0, 0x19, 0xff,
	0x4b, 0x01, 0x21, 0xb1, 0x9b, 0xf3, 0x9d, 0xdf, 0x39, 0xf3, 0xcd, 0xf1, 0x89, 0x02, 0x07, 0xd9,
	0x43, 0xc2, 0xd2, 0xcb, 0x44, 0xf0, 0x8c, 0xa3, 0xce, 0xe2, 0x7e, 0xc9, 0x37, 0x1b, 0xbe, 0x3d,
	0xff, 0x62, 0x15, 0x67, 0xf7, 0xbb, 0xc5, 0xe5, 0x92, 0x6f, 0x5e, 0xad, 0xf8, 0x8a, 0xbf, 0x52,
	0xc0, 0x62, 0xf7, 0x5e, 0x45, 0x2a, 0x50, 0xa7, 0xbc, 0xb0, 0xdf, 0x03, 0x63, 0x12, 0x6f, 0x57,
	0xc8, 0x81, 0xf6, 0x86, 0xa5, 0xe9, 0x7c, 0xc5, 0x1c, 0xad, 0xa7, 0x5d, 0x58, 0xb4, 0x0c, 0x15,
	0xc1, 0xff, 0x93, 0xf8, 0x1e, 0xc0, 0xe3, 0x11, 0x0b, 0xb2, 0x79, 0xb6, 0x4b, 0xd1, 0xe7, 0x60,
	0xa6, 0xd9, 0x3c, 0xcb, 0xa9, 0xa3, 0xd7, 0x27, 0x97, 0xa5, 0xb5, 0xcb, 0x12, 0x62, 0x34, 0x27,
	0xd0, 0xd7, 0xd0, 0x59, 0xce, 0x93, 0xf9, 0x32, 0xce, 0x1e, 0x1c, 0xbd, 0xa7, 0x5d, 0x1c, 0xbc,
	0x3e, 0x7b, 0x4e, 0xbb, 0x45, 0xf6, 0xca, 0x78, 0xfc, 0xfd, 0xd3, 0x06, 0xad, 0xe8, 0xfe, 0xaf,
	0x3a, 0x18, 0x12, 0x40, 0x5d, 0x80, 0x75, 0x9c, 0x66, 0x6c, 0x8b, 0x23, 0x21, 0x0a, 0x63, 0x7b,
	0x0a, 0x3a, 0x02, 0x3d, 0x4e, 0x54, 0x73, 0x8b, 0xea, 0x71, 0x82, 0x10, 0x18, 0x09, 0x17, 0x99,
	0xd3, 0xec, 0x69, 0x17, 0x4d, 0xaa, 0xce, 0xc8, 0x86, 0xe6, 0x2e, 0x8e, 0x1c, 0x43, 0x49, 0xf2,
	0x28, 0xa9, 0x7b, 0x9e, 0x66, 0x8e, 0xa9, 0xea, 0xd4, 0x19, 0x7d, 0x02, 0x56, 0x9a, 0xcd, 0x45,
	0x16, 0xc6, 0x1b, 0xe6, 0xb4, 0x14, 0x5b, 0x0b, 0xcf, 0x9e, 0xd2, 0xfe, 0x3f, 0x4f, 0x91, 0x95,
	0x89, 0xe0, 0x1f, 0xe2, 0x88, 0x09, 0xa7, 0xf3, 0x6f, 0x95, 0x93, 0x22, 0x5b, 0x56, 0x96, 0x34,
	0x7a, 0x09, 0x86, 0xe0, 0x6b, 0xe6, 0x58, 0xaa, 0x0a, 0x3d, 0xaf, 0xa2, 0x7c, 0xcd, 0x8a, 0x0a,
	0x45, 0xf5, 0x7f, 0xd2, 0xe0, 0x70, 0xdf, 0x08, 0x3a, 0x05, 0x73, 0xc9, 0x05, 0x4b, 0xd5, 0xd4,
	0x4c, 0x9a, 0x07, 0x72, 0xa0, 0x1b, 0xb6, 0xe1, 0xe2, 0xe1, 0x8d, 0x60, 0x4c, 0x0d, 0xce, 0xa4,
	0x7b, 0x0a, 0xea, 0xc1, 0x41, 0x1e, 0x85, 0x3c, 0x9b, 0xaf, 0xd5, 0x1c, 0x4d, 0xba, 0x2f, 0xa1,
	0x73, 0xe8, 0x44, 0x71, 0xfa, 0x9d, 0xaa, 0x37, 0x54, 0xba, 0x8a, 0xe5, 0x10, 0xe5, 0x39, 0xaf,
	0x35, 0x55, 0xb2, 0x16, 0xfa, 0x3f, 0x16, 0x16, 0xcb, 0x17, 0xa3, 0xcf, 0xc0, 0x58, 0xf2, 0xa8,
	0x5c, 0xa5, 0xbd, 0x17, 0x96, 0x04, 0x55, 0x79, 0xf4, 0x25, 0x80, 0x60, 0xab, 0x98, 0x6f, 0x5d,
	0x49, 0xeb, 0x8a, 0xb6, 0x6b, 0x9a, 0xaa, 0x1c, 0xdd, 0x63, 0xe4, 0x17, 0xde, 0xce, 0x37, 0x4c,
	0xf9, 0xb7, 0xa8, 0x3a, 0xa3, 0x33, 0x68, 0xe5, 0x84, 0xb2, 0x6d, 0xd1, 0x22, 0xea, 0xff, 0xa0,
	0x41, 0xa7, 0x1c, 0x29, 0x7a, 0x09, 0x56, 0x22, 0xd8, 0x7b, 0x26, 0x04, 0x8b, 0x0a, 0x5f, 0x47,
	0x7b, 0x37, 0xf1, 0x35, 0xa3, 0x35, 0x80, 0x2e, 0xa0, 0xbd, 0xdc, 0x09, 0xc1, 0xb6, 0x59, 0xe1,
	0xea, 0xef, 0x6c, 0x99, 0x46, 0x03, 0xb9, 0x06, 0xec, 0x43, 0xcc, 0x77, 0xa9, 0x32, 0xf5, 0x4f,
	0xb4, 0xca, 0xf7, 0x3f, 0x86, 0xe6, 0x5b, 0xbe, 0x50, 0xbb, 0x1d, 0x15, 0x3b, 0xaf, 0xc7, 0xd1,
	0xe0, 0x17, 0x0d, 0xac, 0xea, 0x37, 0x86, 0x3e, 0x82, 0x17, 0xb7, 0xde, 0x8d, 0xe7, 0x4f, 0xbd,
	0x59, 0x10, 0xe2, 0x90, 0xd8, 0x0d, 0x74, 0x02, 0xc7, 0x6f, 0x46, 0xde, 0xf5, 0xc8, 0x1b, 0xce,
	0x5c, 0xe2, 0x85, 0x14, 0x8f, 0x6d, 0x0d, 0x1d, 0xc3, 0xc1, 0x14, 0x8f, 0x42, 0x29, 0xbe, 0xf5,
	0xaf, 0x6c, 0x1d, 0x39, 0x70, 0x3a, 0xa1, 0xfe, 0xdd, 0x28, 0x18, 0xf9, 0x5e, 0xa1, 0xce, 0x88,
	0x77, 0x67, 0x37, 0x65, 0xcb, 0x12, 0x9d, 0x10, 0x42, 0x03, 0xdb, 0x90, 0xd5, 0xf4, 0xd6, 0x2b,
	0x39, 0xdb, 0x94, 0x77, 0x04, 0x24, 0xbf, 0xe3, 0x1b, 0x12, 0xd2, 0x91, 0x1b, 0xd8, 0x2d, 0x29,
	0xba, 0x63, 0x82, 0xbd, 0xdb, 0x49, 0xd5, 0xad, 0x3d, 0x60, 0xd0, 0xca, 0x3f, 0x0c, 0x42, 0x70,
	0x54, 0x5a, 0xa5, 0x64, 0x38, 0xf2, 0x3d, 0xbb, 0x81, 0x6c, 0x38, 0x1c, 0xfb, 0x2e, 0x1e, 0x97,
	0x8a, 0xa6, 0xa8, 0x60, 0x46, 0x70, 0x10, 0x96, 0x9a, 0x5e, 0x68, 0x53, 0x52, 0x6b, 0x4d, 0xf4,
	0x02, 0x2c, 0xb7, 0x6a, 0x64, 0x0c, 0x7e, 0xd6, 0xa0, 0x53, 0x2d, 0xd4, 0x29, 0xd8, 0xe5, 0x4d,
	0xea, 0x8d, 0xd7, 0x84, 0xda, 0x0d, 0xd9, 0x25, 0xbf, 0xab, 0xd2, 0x34, 0x49, 0xde, 0xe1, 0x21,
	0xc5, 0x5e, 0x58, 0xab, 0xba, 0x74, 0x85, 0xc7, 0xa3, 0x5a, 0x69, 0x2a, 0x65, 0x1a, 0xd4, 0x8a,
	0x21, 0xbb, 0xe1, 0x77, 0xb7, 0x94, 0xd4, 0x9a, 0x29, 0xa9, 0xa1, 0x3b, 0xa9, 0x15, 0x35, 0x92,
	0x09, 0x76, 0x6f, 0xc8, 0x5e, 0xfb, 0xf6, 0x20, 0x00, 0x43, 0x2d, 0x99, 0x0d, 0x87, 0xd5, 0x40,
	0xfc, 0xb1, 0xfc, 0x74, 0x87, 0xd0, 0xc1, 0xde, 0xb7, 0x79, 0xa4, 0xa1, 0x33, 0x40, 0x53, 0x9f,
	0xde, 0x8c, 0x7d, 0x7c, 0x3d, 0x1b, 0x12, 0x8f, 0x50, 0x1c, 0xfa, 0xd2, 0xde, 0x09, 0x1c, 0x5f,
	0xe3, 0x10, 0x5f, 0xe1, 0x80, 0xcc, 0xe4, 0x67, 0x91, 0x0e, 0xaf, 0xce, 0x1f, 0xff, 0xec, 0x36,
	0x1e, 0x9f, 0xba, 0xda, 0x6f, 0x4f, 0x5d, 0xed, 0x8f, 0xa7, 0xae, 0xf6, 0xae, 0x93, 0xaf, 0x55,
	0xb2, 0x58, 0xb4, 0xd4, 0xbf, 0xc0, 0x57, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x05, 0x9f, 0x24,
	0xee, 0x4d, 0x06, 0x00, 0x00,
}
