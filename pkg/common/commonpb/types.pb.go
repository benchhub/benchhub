// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types.proto

/*
	Package commonpb is a generated protocol buffer package.

	It is generated from these files:
		types.proto

	It has these top-level messages:
		Ping
		Pong
		NodeStatus
		Node
		NodeCapacity
		NodeProvider
		NodeRole
		NodePrice
		NodeInfoReq
		NodeInfoRes
		Job
*/
package commonpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// node state, used in
//
// heartbeat with central
// http api for UI
// tag monitoring data
type NodeState int32

const (
	NodeState_UNKNOWN_STATE     NodeState = 0
	NodeState_FINDING_CENTRAL   NodeState = 1
	NodeState_IDLE              NodeState = 2
	NodeState_JOB_WAITING_PEERS NodeState = 4
	NodeState_JOB_RUNNING       NodeState = 5
	NodeState_JOB_REPORTING     NodeState = 6
	NodeState_JOB_CLEANUP       NodeState = 7
)

var NodeState_name = map[int32]string{
	0: "UNKNOWN_STATE",
	1: "FINDING_CENTRAL",
	2: "IDLE",
	4: "JOB_WAITING_PEERS",
	5: "JOB_RUNNING",
	6: "JOB_REPORTING",
	7: "JOB_CLEANUP",
}
var NodeState_value = map[string]int32{
	"UNKNOWN_STATE":     0,
	"FINDING_CENTRAL":   1,
	"IDLE":              2,
	"JOB_WAITING_PEERS": 4,
	"JOB_RUNNING":       5,
	"JOB_REPORTING":     6,
	"JOB_CLEANUP":       7,
}

func (x NodeState) String() string {
	return proto.EnumName(NodeState_name, int32(x))
}
func (NodeState) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type Provider int32

const (
	Provider_UNKNOWN_PROVIDER Provider = 0
	Provider_LOCAL_PROVIDER   Provider = 1
	Provider_VAGRANT_PROVIDER Provider = 2
	Provider_ALI_PROVIDER     Provider = 3
	Provider_AWS_PROVIDER     Provider = 4
	Provider_AZURE_PROVIDER   Provider = 5
	Provider_GCP_PROVIDER     Provider = 6
	Provider_PACKET_PROVIDER  Provider = 7
)

var Provider_name = map[int32]string{
	0: "UNKNOWN_PROVIDER",
	1: "LOCAL_PROVIDER",
	2: "VAGRANT_PROVIDER",
	3: "ALI_PROVIDER",
	4: "AWS_PROVIDER",
	5: "AZURE_PROVIDER",
	6: "GCP_PROVIDER",
	7: "PACKET_PROVIDER",
}
var Provider_value = map[string]int32{
	"UNKNOWN_PROVIDER": 0,
	"LOCAL_PROVIDER":   1,
	"VAGRANT_PROVIDER": 2,
	"ALI_PROVIDER":     3,
	"AWS_PROVIDER":     4,
	"AZURE_PROVIDER":   5,
	"GCP_PROVIDER":     6,
	"PACKET_PROVIDER":  7,
}

func (x Provider) String() string {
	return proto.EnumName(Provider_name, int32(x))
}
func (Provider) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

type Role int32

const (
	Role_UNKNOWN_ROLE Role = 0
	Role_ANY          Role = 1
	Role_CENTRAL      Role = 2
	Role_LOADER       Role = 3
	Role_DATABASE     Role = 4
)

var Role_name = map[int32]string{
	0: "UNKNOWN_ROLE",
	1: "ANY",
	2: "CENTRAL",
	3: "LOADER",
	4: "DATABASE",
}
var Role_value = map[string]int32{
	"UNKNOWN_ROLE": 0,
	"ANY":          1,
	"CENTRAL":      2,
	"LOADER":       3,
	"DATABASE":     4,
}

func (x Role) String() string {
	return proto.EnumName(Role_name, int32(x))
}
func (Role) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

type Ping struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type Pong struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

type NodeStatus struct {
	State    NodeState    `protobuf:"varint,1,opt,name=state,proto3,enum=bhcommon.NodeState" json:"state,omitempty"`
	Capacity NodeCapacity `protobuf:"bytes,2,opt,name=capacity" json:"capacity"`
}

func (m *NodeStatus) Reset()                    { *m = NodeStatus{} }
func (m *NodeStatus) String() string            { return proto.CompactTextString(m) }
func (*NodeStatus) ProtoMessage()               {}
func (*NodeStatus) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

// used for register
type Node struct {
	// addr grpc server listens on i.e. :6081
	BindAdrr string `protobuf:"bytes,1,opt,name=bindAdrr,proto3" json:"bindAdrr,omitempty"`
	// ip grpc server listens on, sometime it's empty for 0.0.0.0
	BindIp string `protobuf:"bytes,2,opt,name=bindIp,proto3" json:"bindIp,omitempty"`
	// port grpc server listens on, addr without the ip part
	BindPort int64 `protobuf:"varint,3,opt,name=bindPort,proto3" json:"bindPort,omitempty"`
	// remoteAddr that server sees when this node act as client, the ip is accurate, but the port is random, not the listen port
	RemoteAddr string `protobuf:"bytes,4,opt,name=remoteAddr,proto3" json:"remoteAddr,omitempty"`
	// self generated uid, used through a node agent's lifetime, change after process restart https://github.com/benchhub/benchhub/issues/17
	Uid string `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`
	// hostname
	Host string `protobuf:"bytes,6,opt,name=host,proto3" json:"host,omitempty"`
	// unix timestamp when process start
	StartTime int64        `protobuf:"varint,7,opt,name=startTime,proto3" json:"startTime,omitempty"`
	BootTime  int64        `protobuf:"varint,8,opt,name=bootTime,proto3" json:"bootTime,omitempty"`
	Capacity  NodeCapacity `protobuf:"bytes,9,opt,name=capacity" json:"capacity"`
	Provider  NodeProvider `protobuf:"bytes,10,opt,name=provider" json:"provider"`
	Role      NodeRole     `protobuf:"bytes,11,opt,name=role" json:"role"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

type NodeCapacity struct {
	// number of cpu cores
	Cores int32 `protobuf:"varint,1,opt,name=cores,proto3" json:"cores,omitempty"`
	// free memory in MB
	MemoryFree int32 `protobuf:"varint,2,opt,name=memoryFree,proto3" json:"memoryFree,omitempty"`
	// total memory in MB
	MemoryTotal int32 `protobuf:"varint,3,opt,name=memoryTotal,proto3" json:"memoryTotal,omitempty"`
	// free disk space in MB
	DiskFree int32 `protobuf:"varint,4,opt,name=diskFree,proto3" json:"diskFree,omitempty"`
	// total disk space in MB
	DiskTotal int32 `protobuf:"varint,5,opt,name=diskTotal,proto3" json:"diskTotal,omitempty"`
}

func (m *NodeCapacity) Reset()                    { *m = NodeCapacity{} }
func (m *NodeCapacity) String() string            { return proto.CompactTextString(m) }
func (*NodeCapacity) ProtoMessage()               {}
func (*NodeCapacity) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

type NodeProvider struct {
	//    Provider code = 1;
	//    Region regionCode = 2;
	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Region   string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Instance string `protobuf:"bytes,3,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (m *NodeProvider) Reset()                    { *m = NodeProvider{} }
func (m *NodeProvider) String() string            { return proto.CompactTextString(m) }
func (*NodeProvider) ProtoMessage()               {}
func (*NodeProvider) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

type NodeRole struct {
	Preferred Role `protobuf:"varint,1,opt,name=preferred,proto3,enum=bhcommon.Role" json:"preferred,omitempty"`
	Current   Role `protobuf:"varint,2,opt,name=current,proto3,enum=bhcommon.Role" json:"current,omitempty"`
	Previous  Role `protobuf:"varint,3,opt,name=previous,proto3,enum=bhcommon.Role" json:"previous,omitempty"`
}

func (m *NodeRole) Reset()                    { *m = NodeRole{} }
func (m *NodeRole) String() string            { return proto.CompactTextString(m) }
func (*NodeRole) ProtoMessage()               {}
func (*NodeRole) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

type NodePrice struct {
	MachinePerHour float64 `protobuf:"fixed64,1,opt,name=MachinePerHour,proto3" json:"MachinePerHour,omitempty"`
	StoragePerGB   float64 `protobuf:"fixed64,2,opt,name=StoragePerGB,proto3" json:"StoragePerGB,omitempty"`
	OutboundPerMB  float64 `protobuf:"fixed64,3,opt,name=OutboundPerMB,proto3" json:"OutboundPerMB,omitempty"`
}

func (m *NodePrice) Reset()                    { *m = NodePrice{} }
func (m *NodePrice) String() string            { return proto.CompactTextString(m) }
func (*NodePrice) ProtoMessage()               {}
func (*NodePrice) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

type NodeInfoReq struct {
}

func (m *NodeInfoReq) Reset()                    { *m = NodeInfoReq{} }
func (m *NodeInfoReq) String() string            { return proto.CompactTextString(m) }
func (*NodeInfoReq) ProtoMessage()               {}
func (*NodeInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

type NodeInfoRes struct {
	Node *Node `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
}

func (m *NodeInfoRes) Reset()                    { *m = NodeInfoRes{} }
func (m *NodeInfoRes) String() string            { return proto.CompactTextString(m) }
func (*NodeInfoRes) ProtoMessage()               {}
func (*NodeInfoRes) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

// ----- start of job ------
type Job struct {
	// TODO: job should have much more info
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{10} }

func init() {
	proto.RegisterType((*Ping)(nil), "bhcommon.Ping")
	proto.RegisterType((*Pong)(nil), "bhcommon.Pong")
	proto.RegisterType((*NodeStatus)(nil), "bhcommon.NodeStatus")
	proto.RegisterType((*Node)(nil), "bhcommon.Node")
	proto.RegisterType((*NodeCapacity)(nil), "bhcommon.NodeCapacity")
	proto.RegisterType((*NodeProvider)(nil), "bhcommon.NodeProvider")
	proto.RegisterType((*NodeRole)(nil), "bhcommon.NodeRole")
	proto.RegisterType((*NodePrice)(nil), "bhcommon.NodePrice")
	proto.RegisterType((*NodeInfoReq)(nil), "bhcommon.NodeInfoReq")
	proto.RegisterType((*NodeInfoRes)(nil), "bhcommon.NodeInfoRes")
	proto.RegisterType((*Job)(nil), "bhcommon.Job")
	proto.RegisterEnum("bhcommon.NodeState", NodeState_name, NodeState_value)
	proto.RegisterEnum("bhcommon.Provider", Provider_name, Provider_value)
	proto.RegisterEnum("bhcommon.Role", Role_name, Role_value)
}
func (m *Ping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ping) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *Pong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pong) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *NodeStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.Capacity.Size()))
	n1, err := m.Capacity.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BindAdrr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BindAdrr)))
		i += copy(dAtA[i:], m.BindAdrr)
	}
	if len(m.BindIp) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BindIp)))
		i += copy(dAtA[i:], m.BindIp)
	}
	if m.BindPort != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BindPort))
	}
	if len(m.RemoteAddr) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RemoteAddr)))
		i += copy(dAtA[i:], m.RemoteAddr)
	}
	if len(m.Uid) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Uid)))
		i += copy(dAtA[i:], m.Uid)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.StartTime))
	}
	if m.BootTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BootTime))
	}
	dAtA[i] = 0x4a
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.Capacity.Size()))
	n2, err := m.Capacity.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x52
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.Provider.Size()))
	n3, err := m.Provider.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x5a
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.Role.Size()))
	n4, err := m.Role.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *NodeCapacity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeCapacity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cores != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Cores))
	}
	if m.MemoryFree != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MemoryFree))
	}
	if m.MemoryTotal != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MemoryTotal))
	}
	if m.DiskFree != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DiskFree))
	}
	if m.DiskTotal != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DiskTotal))
	}
	return i, nil
}

func (m *NodeProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeProvider) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Region) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Region)))
		i += copy(dAtA[i:], m.Region)
	}
	if len(m.Instance) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Instance)))
		i += copy(dAtA[i:], m.Instance)
	}
	return i, nil
}

func (m *NodeRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeRole) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Preferred != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Preferred))
	}
	if m.Current != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Current))
	}
	if m.Previous != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Previous))
	}
	return i, nil
}

func (m *NodePrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodePrice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MachinePerHour != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MachinePerHour))))
		i += 8
	}
	if m.StoragePerGB != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StoragePerGB))))
		i += 8
	}
	if m.OutboundPerMB != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.OutboundPerMB))))
		i += 8
	}
	return i, nil
}

func (m *NodeInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *NodeInfoRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInfoRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Node != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Node.Size()))
		n5, err := m.Node.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *Job) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Job) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Ping) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Pong) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *NodeStatus) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovTypes(uint64(m.State))
	}
	l = m.Capacity.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *Node) Size() (n int) {
	var l int
	_ = l
	l = len(m.BindAdrr)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.BindIp)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BindPort != 0 {
		n += 1 + sovTypes(uint64(m.BindPort))
	}
	l = len(m.RemoteAddr)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovTypes(uint64(m.StartTime))
	}
	if m.BootTime != 0 {
		n += 1 + sovTypes(uint64(m.BootTime))
	}
	l = m.Capacity.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Provider.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Role.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *NodeCapacity) Size() (n int) {
	var l int
	_ = l
	if m.Cores != 0 {
		n += 1 + sovTypes(uint64(m.Cores))
	}
	if m.MemoryFree != 0 {
		n += 1 + sovTypes(uint64(m.MemoryFree))
	}
	if m.MemoryTotal != 0 {
		n += 1 + sovTypes(uint64(m.MemoryTotal))
	}
	if m.DiskFree != 0 {
		n += 1 + sovTypes(uint64(m.DiskFree))
	}
	if m.DiskTotal != 0 {
		n += 1 + sovTypes(uint64(m.DiskTotal))
	}
	return n
}

func (m *NodeProvider) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Instance)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *NodeRole) Size() (n int) {
	var l int
	_ = l
	if m.Preferred != 0 {
		n += 1 + sovTypes(uint64(m.Preferred))
	}
	if m.Current != 0 {
		n += 1 + sovTypes(uint64(m.Current))
	}
	if m.Previous != 0 {
		n += 1 + sovTypes(uint64(m.Previous))
	}
	return n
}

func (m *NodePrice) Size() (n int) {
	var l int
	_ = l
	if m.MachinePerHour != 0 {
		n += 9
	}
	if m.StoragePerGB != 0 {
		n += 9
	}
	if m.OutboundPerMB != 0 {
		n += 9
	}
	return n
}

func (m *NodeInfoReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *NodeInfoRes) Size() (n int) {
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Job) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (NodeState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Capacity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindAdrr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BindAdrr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BindIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindPort", wireType)
			}
			m.BindPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BindPort |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootTime", wireType)
			}
			m.BootTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BootTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Capacity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Provider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Role.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeCapacity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeCapacity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeCapacity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cores", wireType)
			}
			m.Cores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cores |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryFree", wireType)
			}
			m.MemoryFree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryFree |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryTotal", wireType)
			}
			m.MemoryTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryTotal |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskFree", wireType)
			}
			m.DiskFree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskFree |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskTotal", wireType)
			}
			m.DiskTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskTotal |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preferred", wireType)
			}
			m.Preferred = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Preferred |= (Role(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
			m.Current = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Current |= (Role(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Previous", wireType)
			}
			m.Previous = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Previous |= (Role(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodePrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodePrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodePrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachinePerHour", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MachinePerHour = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePerGB", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StoragePerGB = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundPerMB", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.OutboundPerMB = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInfoRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInfoRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInfoRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &Node{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Job) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Job: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Job: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 871 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x25, 0x52, 0xa2, 0x46, 0xb2, 0xc2, 0x6c, 0x7e, 0x40, 0x18, 0x85, 0x2a, 0x10, 0x45,
	0xe1, 0x1a, 0xa9, 0x83, 0xa6, 0x97, 0x5e, 0x29, 0x99, 0x51, 0x98, 0x28, 0x14, 0xb1, 0x92, 0x6d,
	0x34, 0x17, 0x83, 0x22, 0xd7, 0x12, 0x51, 0x93, 0xab, 0x2c, 0x97, 0x01, 0x7c, 0xe8, 0x03, 0xf4,
	0xd2, 0x67, 0xe8, 0xb5, 0x6f, 0xe2, 0x63, 0x9f, 0xa0, 0x68, 0xfd, 0x14, 0x3d, 0x16, 0xbb, 0x24,
	0x45, 0xa9, 0x2e, 0x0a, 0xf4, 0xb6, 0xdf, 0x37, 0xdf, 0xec, 0xcc, 0x7e, 0x33, 0x12, 0xa1, 0xcb,
	0x6f, 0x37, 0x24, 0x3b, 0xdd, 0x30, 0xca, 0x29, 0xd2, 0x97, 0xeb, 0x90, 0x26, 0x09, 0x4d, 0x8f,
	0xbe, 0x5e, 0xc5, 0x7c, 0x9d, 0x2f, 0x4f, 0x43, 0x9a, 0xbc, 0x5c, 0xd1, 0x15, 0x7d, 0x29, 0x05,
	0xcb, 0xfc, 0x5a, 0x22, 0x09, 0xe4, 0xa9, 0x48, 0xb4, 0x86, 0xa0, 0xfa, 0x71, 0xba, 0x42, 0x26,
	0xb4, 0x13, 0x92, 0x65, 0xc1, 0x8a, 0x98, 0xca, 0x50, 0x39, 0xee, 0xe0, 0x0a, 0x4a, 0x05, 0xfd,
	0x4f, 0xc5, 0x47, 0x00, 0x8f, 0x46, 0x64, 0xce, 0x03, 0x9e, 0x67, 0xe8, 0x2b, 0xd0, 0x32, 0x1e,
	0xf0, 0x42, 0xd5, 0x7f, 0xf5, 0xe4, 0xb4, 0x6a, 0xed, 0xb4, 0x12, 0x11, 0x5c, 0x28, 0xd0, 0x77,
	0xa0, 0x87, 0xc1, 0x26, 0x08, 0x63, 0x7e, 0x6b, 0x36, 0x86, 0xca, 0x71, 0xf7, 0xd5, 0xf3, 0x7d,
	0xf5, 0xb8, 0x8c, 0x8e, 0xd4, 0xbb, 0xdf, 0x3f, 0x3f, 0xc0, 0x5b, 0xb5, 0xf5, 0x57, 0x03, 0x54,
	0x21, 0x40, 0x47, 0xa0, 0x2f, 0xe3, 0x34, 0xb2, 0x23, 0xc6, 0xca, 0xb6, 0xb6, 0x18, 0x3d, 0x87,
	0x96, 0x38, 0xbb, 0x1b, 0x79, 0x79, 0x07, 0x97, 0xa8, 0xca, 0xf1, 0x29, 0xe3, 0x66, 0x73, 0xa8,
	0x1c, 0x37, 0xf1, 0x16, 0xa3, 0x01, 0x00, 0x23, 0x09, 0xe5, 0xc4, 0x8e, 0x22, 0x66, 0xaa, 0x32,
	0x6f, 0x87, 0x41, 0x06, 0x34, 0xf3, 0x38, 0x32, 0x35, 0x19, 0x10, 0x47, 0x84, 0x40, 0x5d, 0xd3,
	0x8c, 0x9b, 0x2d, 0x49, 0xc9, 0x33, 0xfa, 0x0c, 0x3a, 0x19, 0x0f, 0x18, 0x5f, 0xc4, 0x09, 0x31,
	0xdb, 0xb2, 0x44, 0x4d, 0xc8, 0xfa, 0x94, 0x16, 0x41, 0xbd, 0xac, 0x5f, 0xe2, 0x3d, 0x4b, 0x3a,
	0xff, 0xc7, 0x12, 0x91, 0xb9, 0x61, 0xf4, 0x53, 0x1c, 0x11, 0x66, 0xc2, 0xbf, 0x65, 0xfa, 0x65,
	0xb4, 0xca, 0xac, 0xd4, 0xe8, 0x05, 0xa8, 0x8c, 0xde, 0x10, 0xb3, 0x2b, 0xb3, 0xd0, 0x7e, 0x16,
	0xa6, 0x37, 0xa4, 0xcc, 0x90, 0x2a, 0xeb, 0x17, 0x05, 0x7a, 0xbb, 0x8d, 0xa0, 0xa7, 0xa0, 0x85,
	0x94, 0x91, 0x4c, 0xfa, 0xaf, 0xe1, 0x02, 0x08, 0x23, 0x13, 0x92, 0x50, 0x76, 0xfb, 0x9a, 0x11,
	0x22, 0x07, 0xa0, 0xe1, 0x1d, 0x06, 0x0d, 0xa1, 0x5b, 0xa0, 0x05, 0xe5, 0xc1, 0x8d, 0x9c, 0x83,
	0x86, 0x77, 0x29, 0x61, 0x53, 0x14, 0x67, 0x3f, 0xc8, 0x7c, 0x55, 0x86, 0xb7, 0x58, 0x18, 0x2c,
	0xce, 0x45, 0xae, 0x26, 0x83, 0x35, 0x61, 0x5d, 0x14, 0x1d, 0x56, 0x0f, 0x16, 0x23, 0x4a, 0x83,
	0xa4, 0xda, 0x5b, 0x79, 0x16, 0xcb, 0xc1, 0xc8, 0x2a, 0xa6, 0x69, 0xb5, 0x1c, 0x05, 0x12, 0x55,
	0xe3, 0x34, 0xe3, 0x41, 0x1a, 0x12, 0xd9, 0x54, 0x07, 0x6f, 0xb1, 0xf5, 0xb3, 0x02, 0x7a, 0xe5,
	0x09, 0x7a, 0x01, 0x9d, 0x0d, 0x23, 0xd7, 0x84, 0x31, 0x12, 0x95, 0xbb, 0xde, 0xaf, 0xad, 0x13,
	0x12, 0x5c, 0x0b, 0xd0, 0x31, 0xb4, 0xc3, 0x9c, 0x31, 0x92, 0x72, 0x59, 0xef, 0xa1, 0xb6, 0x0a,
	0xa3, 0x13, 0x31, 0x47, 0xf2, 0x29, 0xa6, 0x79, 0x26, 0x1b, 0x78, 0x28, 0xdd, 0xc6, 0xad, 0x1f,
	0xa1, 0x53, 0x3c, 0x34, 0x0e, 0x09, 0xfa, 0x12, 0xfa, 0xef, 0x83, 0x70, 0x1d, 0xa7, 0xc4, 0x27,
	0xec, 0x0d, 0xcd, 0x8b, 0x1f, 0x84, 0x82, 0xff, 0xc1, 0x22, 0x0b, 0x7a, 0x73, 0x4e, 0x59, 0xb0,
	0x12, 0xcc, 0x64, 0x24, 0xfb, 0x51, 0xf0, 0x1e, 0x87, 0xbe, 0x80, 0xc3, 0x59, 0xce, 0x97, 0x34,
	0x4f, 0x23, 0x9f, 0xb0, 0xf7, 0x23, 0xd9, 0x89, 0x82, 0xf7, 0x49, 0xeb, 0x10, 0xba, 0xa2, 0xbc,
	0x9b, 0x5e, 0x53, 0x4c, 0x3e, 0x5a, 0xdf, 0xec, 0xc2, 0x0c, 0x59, 0xa0, 0xa6, 0x34, 0x2a, 0x5c,
	0xef, 0xee, 0x3e, 0x42, 0x5a, 0x28, 0x63, 0xd6, 0x33, 0x68, 0xbe, 0xa5, 0x4b, 0xd4, 0x87, 0x46,
	0x1c, 0x95, 0xe3, 0x69, 0xc4, 0xd1, 0xc9, 0x4f, 0x4a, 0xf1, 0x30, 0xf9, 0x6f, 0x81, 0x1e, 0xc3,
	0xe1, 0xb9, 0xf7, 0xce, 0x9b, 0x5d, 0x7a, 0x57, 0xf3, 0x85, 0xbd, 0x70, 0x8c, 0x03, 0xf4, 0x04,
	0x1e, 0xbd, 0x76, 0xbd, 0x33, 0xd7, 0x9b, 0x5c, 0x8d, 0x1d, 0x6f, 0x81, 0xed, 0xa9, 0xa1, 0x20,
	0x1d, 0x54, 0xf7, 0x6c, 0xea, 0x18, 0x0d, 0xf4, 0x0c, 0x1e, 0xbf, 0x9d, 0x8d, 0xae, 0x2e, 0x6d,
	0x77, 0x21, 0x24, 0xbe, 0xe3, 0xe0, 0xb9, 0xa1, 0xa2, 0x47, 0xd0, 0x15, 0x34, 0x3e, 0xf7, 0x3c,
	0xd7, 0x9b, 0x18, 0x9a, 0xb8, 0x59, 0x12, 0x8e, 0x3f, 0xc3, 0x42, 0x69, 0xb4, 0x2a, 0xcd, 0x78,
	0xea, 0xd8, 0xde, 0xb9, 0x6f, 0xb4, 0x4f, 0x7e, 0x55, 0x40, 0xdf, 0x6e, 0xd2, 0x53, 0x30, 0xaa,
	0x56, 0x7c, 0x3c, 0xbb, 0x70, 0xcf, 0x1c, 0x6c, 0x1c, 0x20, 0x04, 0xfd, 0xe9, 0x6c, 0x6c, 0x4f,
	0x6b, 0x4e, 0x11, 0xca, 0x0b, 0x7b, 0x82, 0x6d, 0x6f, 0x51, 0xb3, 0x0d, 0x64, 0x40, 0xcf, 0x9e,
	0xba, 0x35, 0xd3, 0x94, 0xcc, 0xe5, 0xbc, 0x66, 0x54, 0x71, 0x9b, 0xfd, 0xe1, 0x1c, 0x3b, 0x35,
	0xa7, 0x09, 0xd5, 0x64, 0xec, 0xd7, 0x4c, 0x4b, 0x38, 0xe0, 0xdb, 0xe3, 0x77, 0xce, 0xce, 0xf5,
	0xed, 0x93, 0x37, 0xa0, 0xca, 0xdd, 0x34, 0xa0, 0x57, 0xb5, 0x89, 0x67, 0x53, 0x61, 0x58, 0x1b,
	0x9a, 0xb6, 0xf7, 0xbd, 0xa1, 0xa0, 0x2e, 0xb4, 0x2b, 0xc7, 0x1a, 0x08, 0xa0, 0x35, 0x9d, 0xd9,
	0x45, 0x23, 0x3d, 0xd0, 0xcf, 0xec, 0x85, 0x3d, 0xb2, 0xe7, 0x8e, 0xa1, 0x8e, 0x8e, 0xee, 0xfe,
	0x1c, 0x1c, 0xdc, 0xdd, 0x0f, 0x94, 0xdf, 0xee, 0x07, 0xca, 0x1f, 0xf7, 0x03, 0xe5, 0x83, 0x5e,
	0x4c, 0x6f, 0xb3, 0x5c, 0xb6, 0xe4, 0xa7, 0xe3, 0xdb, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x95,
	0xc7, 0xe5, 0xc6, 0x82, 0x06, 0x00, 0x00,
}
