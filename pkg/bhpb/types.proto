// protoc --proto_path=/home/at15/workspace/src/:. --gogo_out=. types.proto
syntax = "proto3";
package bh;

option go_package = "bhpb";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

// ---------------------------
//           <node>
// ---------------------------
message Node {
    string id = 1;
    NodeState state = 2;
    NodeInfo info = 3 [(gogoproto.nullable) = false];
}

// provided to central when agent register
message NodeInfo {
    // self generated uid, used through a node agent's lifetime, change after process restart https://github.com/benchhub/benchhub/issues/17
    string id = 1;
    // hostname
    string host = 2;
    Addr addr = 3 [(gogoproto.nullable) = false];
    // unix timestamp when process start
    int64 startTime = 4;
    int64 bootTime = 5;
    // preffered role set in config file
    Role role = 10;
    // machine (physical, vm) provider
    NodeProvider provider = 11 [(gogoproto.nullable) = false];
    // capacity when register
    NodeCapacity capacity = 12 [(gogoproto.nullable) = false];
}

message Addr {
    // set when node start or obtain from remoteAddr
    // TODO: this is a workaround because I don't know how a client can know its ip without calling external service
    // TODO: https://github.com/benchhub/benchhub/issues/18 track this, hashicorp has https://github.com/hashicorp/go-sockaddr
    string ip = 1;
    // addr grpc server listens on i.e. :6081, from node config file
    string bindAddr = 2;
    // remoteAddr that server sees when this node act as client, the ip is accurate, but the port is random, not the listen port
    string remoteAddr = 3;
}

enum Role {
    UNKNOWN_ROLE = 0;
    ANY = 1; // 随便 都行
    CENTRAL = 2;
    LOADER = 3;
    DATABASE = 4;
}

message NodeCapacity {
    // number of cpu cores
    int32 cores = 1;
    // free memory in MB
    int32 memoryFree = 2;
    // total memory in MB
    int32 memoryTotal = 3;
    // free disk space in MB
    int32 diskFree = 4;
    // total disk space in MB
    int32 diskTotal = 5;
}

enum Provider {
    UNKNOWN_PROVIDER = 0;
    LOCAL_PROVIDER = 1; // local dev environment
    VAGRANT_PROVIDER = 2; // vagrant, mostly local
    ALI_PROVIDER = 3;
    AWS_PROVIDER = 4;
    AZURE_PROVIDER = 5;
    GCP_PROVIDER = 6;
    PACKET_PROVIDER = 7;
}

message NodeProvider {
    string name = 1;
    string region = 2;
    string instance = 3;
}

message NodeStatus {
    NodeState state = 1;
    // TODO: need to include job information
}

enum NodeState {
    UNKNOWN_STATE = 0;
    FINDING_CENTRAL = 1;
    IDLE = 2;
    JOB_RUNNING = 3;
    JOB_WAITING_PEERS = 5;
    JOB_REPORTING = 6;
    JOB_CLEANUP = 7;
}

// ---------------------------
//           <node>
// ---------------------------

// ---------------------------
//           <job>
// ---------------------------

message Job {
    // TODO: job should have much more info
    string id = 1;
    string spec = 2;
    int64 createTime = 3;
    int64 startTime = 4;
}

enum JobResult {
    UNKNOWN_RESULT = 0;
    SUCCESS = 1;
    ERROR = 2;
}

message JobStatus {
    int64 stage = 1;
    int64 task = 2;
}
// ---------------------------
//           <job>
// ---------------------------

// ---------------------------
//       <common rpc>
// ---------------------------
message Ping {
    string message = 1;
}

message Pong {
    string message = 1;
}

message EmptyReq {
}

message NodeInfoReq {
}

message NodeInfoRes {
    NodeInfo node = 1;
}
// ---------------------------
//       <common rpc>
// ---------------------------

// ---------------------------
//       <node rpc>
// ---------------------------
message RegisterAgentReq {
    NodeInfo node = 1 [(gogoproto.nullable) = false];
}

message RegisterAgentRes {
    string id = 1; // uinque id for this agent assigned by central
    NodeInfo node = 2 [(gogoproto.nullable) = false]; // addr, ip, port would be added TODO: node should be able to find this out locally
    NodeInfo central = 3 [(gogoproto.nullable) = false]; // all the information about the central
}

message ListAgentReq {
}

message ListAgentRes {
    repeated Node agents = 1 [(gogoproto.nullable) = false];
}

message AgentHeartbeatReq {
    string id = 1;
    NodeStatus status = 2 [(gogoproto.nullable) = false];
}

message AgentHeartbeatRes {
    //    Job job = 1 [(gogoproto.nullable) = false];
}

// ---------------------------
//       <node rpc>
// ---------------------------

// ---------------------------
//       <job rpc>
// ---------------------------
message SubmitJobReq {
    string user = 1;
    string spec = 2;
}

message SubmitJobRes {
    string id = 1;
    int64 pending = 2;
}

message JobStatusReq {
    string id = 1;
}

message JobStatusRes {

}
// ---------------------------
//       <job rpc>
// ---------------------------