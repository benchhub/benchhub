package generator

import (
	"io"
	"path/filepath"
	"strings"

	"github.com/benchhub/benchhub/lib/plural"
	"github.com/benchhub/benchhub/lib/tqbuilder/sql/ddl"
	"github.com/dyweb/gommon/errors"
	"github.com/dyweb/gommon/util/fsutil"
	"github.com/dyweb/gommon/util/genutil"
)

const ddlSuffix = "ddl"

const ddlMainTemplate = `
// Code generated by tqbuilder DO NOT EDIT.

package main

import (
	dlog "github.com/dyweb/gommon/log"
	"github.com/dyweb/gommon/errors"
	"github.com/benchhub/benchhub/lib/tqbuilder/generator"

{{ range .DDLImports }}
	{{ .Name }} "{{ .Path }}"
{{- end }}
)

var (
	logReg = dlog.NewRegistry()
	log = logReg.NewLogger()
)

func main() {
	if err := run(); err != nil {
		log.Fatal(err)
	}
}

func run() error {
	ddls := []generator.DDLTables{
{{ range .DDLImports }}
		{
			Path: "{{ .Path }}",
			Package: "{{ .Package }}",
			Tables: {{ .Name }}.Tables(),
			GeneratedPath: "{{ .GeneratedPath }}",
		},
{{- end }}
	}
	merr := errors.NewMultiErr()
	for _, ddl := range ddls {
		merr.Append(generator.GenDDL(ddl))
	}
	return merr.ErrorOrNil()
}
`

type DDLImport struct {
	Name          string // import alias in generated go code
	Path          string // import path
	Package       string // extracted package name, e.g. user, act etc.
	GeneratedPath string // relative path to output generated files, e.g. core/services/user/schema/generated
}

type DDLTables struct {
	Path          string
	Package       string // copied from DDLImport name for generating new package name. e.g. user -> usermodel
	Tables        []ddl.TableDef
	GeneratedPath string // copied from DDLImport, e.g. core/services/user/schema/generated
}

// GenDDLMain generates a main.go file that can generate go binding and SQL
// based on table definitions written in go AST.
func GenDDLMain(dst io.Writer, importPrefix string, ddls []string) error {
	// Generate unique import name based on path
	// TODO: it is no longer unique if there are packages with same name ...\
	var ddlImports []DDLImport
	for _, ddlPath := range ddls {
		// user/schema/ddl -> userddl
		segs := strings.Split(ddlPath, "/")
		if len(segs) < 3 {
			return errors.Errorf("expect at least 3 segments in ddl path, got %d from %s", len(segs), ddlPath)
		}
		pkg := segs[len(segs)-3] // user
		name := pkg + ddlSuffix  // userddl
		segs[len(segs)-1] = "generated"
		genPath := filepath.Join(segs...) // core/services/user/schema/generated
		ddlImports = append(ddlImports, DDLImport{
			Name: name,
			// core/services/user/schema/ddl -> github.com/benchhub/benchhub/core/services/user/schema/ddl
			Path:          importPrefix + "/" + ddlPath,
			Package:       pkg,
			GeneratedPath: genPath,
		})
	}

	data := map[string]interface{}{
		"DDLImports": ddlImports,
	}
	return renderTo("ddlmain", dst, ddlMainTemplate, data)
}

// GenDDL generates table(s) for a single package (service).
func GenDDL(d DDLTables) error {
	// Model
	p := filepath.Join(d.GeneratedPath, d.Package+modelSuffix)
	log.Infof("GenDDL %s %d tables to %s", d.Path, len(d.Tables), p)
	f, err := fsutil.CreateFileAndPath(p, "pkg.go")
	if err != nil {
		return err
	}
	defer f.Close()
	if err := genDDLModel(f, d); err != nil {
		return err
	}
	// TODO: schema, markdown, sql
	return nil
}

const modelSuffix = "model"

const ddlModelTemplate = `
// Code generated by tqbuilder from {{.DDLPath}} DO NOT EDIT.

package {{ .Package }}

{{ range .Structs }}
// {{ .Name }} is generated from table definition of TODO(tqbuilder): table name
type {{ .Name }} struct {
{{ range .Fields }}
	{{ .Name }} {{ .Type }}
{{- end }}
}
{{ end }}
`

type ddlModelData struct {
	DDLPath string // path of ddl definition
	Package string // package name
	Structs []structDef
}

// TODO: should save table name, original field name etc.
func table2Structdef(tbl ddl.TableDef) structDef {
	var fields []fieldDef
	for _, f := range tbl.Columns {
		fields = append(fields, fieldDef{
			Name: genutil.SnakeToCamel(f.Name),
			Type: f.Type.GoType(),
		})
	}
	structName := plural.ToSingular(tbl.Name)
	structName = genutil.UcFirst(structName)
	return structDef{
		Name:   structName,
		Fields: fields,
	}
}

func genDDLModel(dst io.Writer, d DDLTables) error {
	var structs []structDef
	for _, tbl := range d.Tables {
		structs = append(structs, table2Structdef(tbl))
	}
	data := ddlModelData{
		DDLPath: d.Path,
		Package: d.Package + modelSuffix,
		Structs: structs,
	}
	return renderTo("ddlmodel", dst, ddlModelTemplate, data)
}
