// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gobench.proto

package bhpb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TODO: single server, single command and single report to make things easier for now
type GoBenchmarkSpec struct {
	Package              string                  `protobuf:"bytes,1,opt,name=package,proto3" json:"package,omitempty"`
	Server               *ServerTarget           `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
	Command              *GoBenchmarkCommandSpec `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	Report               *GoBenchmarkReportSpec  `protobuf:"bytes,4,opt,name=report,proto3" json:"report,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GoBenchmarkSpec) Reset()         { *m = GoBenchmarkSpec{} }
func (m *GoBenchmarkSpec) String() string { return proto.CompactTextString(m) }
func (*GoBenchmarkSpec) ProtoMessage()    {}
func (*GoBenchmarkSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a56bd951d162f, []int{0}
}
func (m *GoBenchmarkSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoBenchmarkSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoBenchmarkSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoBenchmarkSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoBenchmarkSpec.Merge(m, src)
}
func (m *GoBenchmarkSpec) XXX_Size() int {
	return m.Size()
}
func (m *GoBenchmarkSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_GoBenchmarkSpec.DiscardUnknown(m)
}

var xxx_messageInfo_GoBenchmarkSpec proto.InternalMessageInfo

type GoBenchmarkCommandSpec struct {
	// TODO: command.command is not a good naming ...
	Command              string   `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Output               string   `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GoBenchmarkCommandSpec) Reset()         { *m = GoBenchmarkCommandSpec{} }
func (m *GoBenchmarkCommandSpec) String() string { return proto.CompactTextString(m) }
func (*GoBenchmarkCommandSpec) ProtoMessage()    {}
func (*GoBenchmarkCommandSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a56bd951d162f, []int{1}
}
func (m *GoBenchmarkCommandSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoBenchmarkCommandSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoBenchmarkCommandSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoBenchmarkCommandSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoBenchmarkCommandSpec.Merge(m, src)
}
func (m *GoBenchmarkCommandSpec) XXX_Size() int {
	return m.Size()
}
func (m *GoBenchmarkCommandSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_GoBenchmarkCommandSpec.DiscardUnknown(m)
}

var xxx_messageInfo_GoBenchmarkCommandSpec proto.InternalMessageInfo

type GoBenchmarkReportSpec struct {
	Input                string   `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GoBenchmarkReportSpec) Reset()         { *m = GoBenchmarkReportSpec{} }
func (m *GoBenchmarkReportSpec) String() string { return proto.CompactTextString(m) }
func (*GoBenchmarkReportSpec) ProtoMessage()    {}
func (*GoBenchmarkReportSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a56bd951d162f, []int{2}
}
func (m *GoBenchmarkReportSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoBenchmarkReportSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoBenchmarkReportSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoBenchmarkReportSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoBenchmarkReportSpec.Merge(m, src)
}
func (m *GoBenchmarkReportSpec) XXX_Size() int {
	return m.Size()
}
func (m *GoBenchmarkReportSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_GoBenchmarkReportSpec.DiscardUnknown(m)
}

var xxx_messageInfo_GoBenchmarkReportSpec proto.InternalMessageInfo

type GoBenchmarkResult struct {
	Package string `protobuf:"bytes,1,opt,name=package,proto3" json:"package,omitempty"`
	// name does not have core suffix
	Name                string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NOp                 int64   `protobuf:"varint,3,opt,name=n_op,json=nOp,proto3" json:"n_op,omitempty"`
	NsPerOp             float64 `protobuf:"fixed64,4,opt,name=ns_per_op,json=nsPerOp,proto3" json:"ns_per_op,omitempty"`
	AllocPerOp          uint64  `protobuf:"varint,5,opt,name=alloc_per_op,json=allocPerOp,proto3" json:"alloc_per_op,omitempty"`
	BytesAllocatedPerOp uint64  `protobuf:"varint,6,opt,name=bytes_allocated_per_op,json=bytesAllocatedPerOp,proto3" json:"bytes_allocated_per_op,omitempty"`
	MbPerSecond         float64 `protobuf:"fixed64,7,opt,name=mb_per_second,json=mbPerSecond,proto3" json:"mb_per_second,omitempty"`
	Measured            int64   `protobuf:"varint,8,opt,name=measured,proto3" json:"measured,omitempty"`
	Ord                 uint32  `protobuf:"varint,9,opt,name=ord,proto3" json:"ord,omitempty"`
	// calculated
	Duration int64 `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"`
	// extracted
	Cpu                  uint32   `protobuf:"varint,11,opt,name=cpu,proto3" json:"cpu,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GoBenchmarkResult) Reset()         { *m = GoBenchmarkResult{} }
func (m *GoBenchmarkResult) String() string { return proto.CompactTextString(m) }
func (*GoBenchmarkResult) ProtoMessage()    {}
func (*GoBenchmarkResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a56bd951d162f, []int{3}
}
func (m *GoBenchmarkResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoBenchmarkResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoBenchmarkResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoBenchmarkResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoBenchmarkResult.Merge(m, src)
}
func (m *GoBenchmarkResult) XXX_Size() int {
	return m.Size()
}
func (m *GoBenchmarkResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GoBenchmarkResult.DiscardUnknown(m)
}

var xxx_messageInfo_GoBenchmarkResult proto.InternalMessageInfo

// TODO: it only reports a single package at a time
type GoBenchmarkReportResultRequest struct {
	JobId   int64                `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Package string               `protobuf:"bytes,2,opt,name=package,proto3" json:"package,omitempty"`
	Results []*GoBenchmarkResult `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	// unix nano
	StartTime            int64    `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              int64    `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GoBenchmarkReportResultRequest) Reset()         { *m = GoBenchmarkReportResultRequest{} }
func (m *GoBenchmarkReportResultRequest) String() string { return proto.CompactTextString(m) }
func (*GoBenchmarkReportResultRequest) ProtoMessage()    {}
func (*GoBenchmarkReportResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a56bd951d162f, []int{4}
}
func (m *GoBenchmarkReportResultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoBenchmarkReportResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoBenchmarkReportResultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoBenchmarkReportResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoBenchmarkReportResultRequest.Merge(m, src)
}
func (m *GoBenchmarkReportResultRequest) XXX_Size() int {
	return m.Size()
}
func (m *GoBenchmarkReportResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GoBenchmarkReportResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GoBenchmarkReportResultRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GoBenchmarkSpec)(nil), "bhpb.GoBenchmarkSpec")
	proto.RegisterType((*GoBenchmarkCommandSpec)(nil), "bhpb.GoBenchmarkCommandSpec")
	proto.RegisterType((*GoBenchmarkReportSpec)(nil), "bhpb.GoBenchmarkReportSpec")
	proto.RegisterType((*GoBenchmarkResult)(nil), "bhpb.GoBenchmarkResult")
	proto.RegisterType((*GoBenchmarkReportResultRequest)(nil), "bhpb.GoBenchmarkReportResultRequest")
}

func init() { proto.RegisterFile("gobench.proto", fileDescriptor_a18a56bd951d162f) }

var fileDescriptor_a18a56bd951d162f = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x49, 0xd3, 0x26, 0xed, 0xeb, 0x2a, 0x98, 0x61, 0x25, 0x14, 0xa8, 0xa2, 0x9c, 0x2a,
	0xa4, 0x75, 0x62, 0x95, 0xb8, 0x33, 0x0e, 0x08, 0x2e, 0x9b, 0xdc, 0x9d, 0xb8, 0x54, 0x71, 0x62,
	0xd2, 0x6c, 0x8d, 0x6d, 0x1c, 0x07, 0x89, 0x2f, 0xc7, 0x09, 0x89, 0x1d, 0xf9, 0x08, 0xd0, 0x4f,
	0x82, 0xfc, 0xdc, 0xa0, 0x4d, 0xab, 0xb8, 0xf9, 0xbd, 0xff, 0xef, 0xbd, 0xbf, 0xfd, 0x6f, 0x03,
	0xa3, 0x42, 0x32, 0x2e, 0xb2, 0xf5, 0x5c, 0x69, 0x69, 0x24, 0xe9, 0xb2, 0xb5, 0x62, 0x93, 0xe3,
	0xa2, 0x34, 0xeb, 0x86, 0xcd, 0x33, 0x59, 0x9d, 0x14, 0xb2, 0x90, 0x27, 0x28, 0xb2, 0xe6, 0x33,
	0x56, 0x58, 0xe0, 0xc9, 0x0d, 0x4d, 0x0e, 0x32, 0x59, 0x55, 0x52, 0xb8, 0x2a, 0xf9, 0xe1, 0xc1,
	0xc3, 0xf7, 0xf2, 0xcc, 0x2e, 0xad, 0x52, 0x7d, 0xbd, 0x54, 0x3c, 0x23, 0x11, 0x84, 0x2a, 0xcd,
	0xae, 0xd3, 0x82, 0x47, 0x5e, 0xec, 0xcd, 0x06, 0xb4, 0x2d, 0xc9, 0x2b, 0x08, 0x6a, 0xae, 0xbf,
	0x72, 0x1d, 0x75, 0x62, 0x6f, 0x36, 0x3c, 0x25, 0x73, 0x7b, 0x83, 0xf9, 0x12, 0x7b, 0x97, 0xa9,
	0x2e, 0xb8, 0xa1, 0x3b, 0x82, 0xbc, 0x81, 0xd0, 0x3a, 0xa5, 0x22, 0x8f, 0x7c, 0x84, 0x5f, 0x38,
	0xf8, 0x96, 0xdb, 0x3b, 0xa7, 0x5b, 0x53, 0xda, 0xc2, 0x64, 0x01, 0x81, 0xe6, 0x4a, 0x6a, 0x13,
	0x75, 0x71, 0xec, 0xf9, 0xbd, 0x31, 0x8a, 0x32, 0x4e, 0xed, 0xd0, 0xe4, 0x23, 0x8c, 0xf7, 0xef,
	0xb5, 0x8f, 0x69, 0xaf, 0xb1, 0x7b, 0x4c, 0x6b, 0x34, 0x86, 0x40, 0x36, 0x46, 0x35, 0x06, 0x1f,
	0x33, 0xa0, 0xbb, 0x2a, 0x39, 0x86, 0xa3, 0xbd, 0x66, 0xe4, 0x09, 0xf4, 0x4a, 0x61, 0x79, 0xb7,
	0xc8, 0x15, 0xc9, 0xcf, 0x0e, 0x1c, 0xde, 0xe1, 0xeb, 0x66, 0x63, 0xfe, 0x93, 0x21, 0x81, 0xae,
	0x48, 0x2b, 0xbe, 0x33, 0xc5, 0x33, 0x39, 0x84, 0xae, 0x58, 0x49, 0x85, 0x41, 0xf9, 0xd4, 0x17,
	0xe7, 0x8a, 0x4c, 0x60, 0x20, 0xea, 0x95, 0xe2, 0xda, 0xf6, 0x6d, 0x12, 0x1e, 0x0d, 0x45, 0x7d,
	0xc1, 0xf5, 0xb9, 0x22, 0x31, 0x1c, 0xa4, 0x9b, 0x8d, 0xcc, 0x5a, 0xb9, 0x17, 0x7b, 0xb3, 0x2e,
	0x05, 0xec, 0x39, 0x62, 0x01, 0x63, 0xf6, 0xcd, 0xf0, 0x7a, 0x85, 0xbd, 0xd4, 0xf0, 0xbc, 0x65,
	0x03, 0x64, 0x1f, 0xa3, 0xfa, 0xb6, 0x15, 0xdd, 0x50, 0x02, 0xa3, 0x8a, 0x21, 0x57, 0xf3, 0x4c,
	0x8a, 0x3c, 0x0a, 0xd1, 0x76, 0x58, 0xb1, 0x0b, 0xae, 0x97, 0xd8, 0x22, 0x13, 0xe8, 0x57, 0x3c,
	0xad, 0x1b, 0xcd, 0xf3, 0xa8, 0x8f, 0xb7, 0xfd, 0x57, 0x93, 0x47, 0xe0, 0x4b, 0x9d, 0x47, 0x83,
	0xd8, 0x9b, 0x8d, 0xa8, 0x3d, 0x5a, 0x3a, 0x6f, 0x74, 0x6a, 0x4a, 0x29, 0x22, 0x70, 0x74, 0x5b,
	0x5b, 0x3a, 0x53, 0x4d, 0x34, 0x74, 0x74, 0xa6, 0x9a, 0xe4, 0xbb, 0x07, 0xd3, 0x7b, 0xc9, 0xbb,
	0x3c, 0x29, 0xff, 0xd2, 0xf0, 0xda, 0x90, 0x23, 0x08, 0xae, 0x24, 0x5b, 0x95, 0xee, 0xc7, 0xf4,
	0x69, 0xef, 0x4a, 0xb2, 0x0f, 0xf9, 0xed, 0xb4, 0x3b, 0x77, 0xd3, 0x7e, 0x0d, 0xa1, 0xc6, 0x0d,
	0x75, 0xe4, 0xc7, 0xfe, 0x6c, 0x78, 0xfa, 0x74, 0xcf, 0xdf, 0x09, 0x1d, 0x5a, 0x8e, 0xbc, 0x04,
	0xa8, 0x4d, 0xaa, 0xcd, 0xca, 0x94, 0x15, 0xc7, 0xe8, 0x7d, 0x3a, 0xc0, 0xce, 0x65, 0x59, 0x71,
	0xf2, 0x0c, 0xfa, 0x5c, 0xe4, 0x4e, 0xec, 0xa1, 0x18, 0x72, 0x91, 0x5b, 0xe9, 0x6c, 0x7c, 0xf3,
	0x67, 0xfa, 0xe0, 0x66, 0x3b, 0xf5, 0x7e, 0x6d, 0xa7, 0xde, 0xef, 0xed, 0xd4, 0xfb, 0x84, 0x5f,
	0x28, 0x0b, 0xf0, 0x5b, 0x5b, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xe5, 0x04, 0x2a, 0xbf,
	0x03, 0x00, 0x00,
}

func (m *GoBenchmarkSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoBenchmarkSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoBenchmarkSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Report != nil {
		{
			size, err := m.Report.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGobench(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGobench(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Server != nil {
		{
			size, err := m.Server.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGobench(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Package) > 0 {
		i -= len(m.Package)
		copy(dAtA[i:], m.Package)
		i = encodeVarintGobench(dAtA, i, uint64(len(m.Package)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GoBenchmarkCommandSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoBenchmarkCommandSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoBenchmarkCommandSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Output) > 0 {
		i -= len(m.Output)
		copy(dAtA[i:], m.Output)
		i = encodeVarintGobench(dAtA, i, uint64(len(m.Output)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Command) > 0 {
		i -= len(m.Command)
		copy(dAtA[i:], m.Command)
		i = encodeVarintGobench(dAtA, i, uint64(len(m.Command)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GoBenchmarkReportSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoBenchmarkReportSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoBenchmarkReportSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintGobench(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GoBenchmarkResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoBenchmarkResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoBenchmarkResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cpu != 0 {
		i = encodeVarintGobench(dAtA, i, uint64(m.Cpu))
		i--
		dAtA[i] = 0x58
	}
	if m.Duration != 0 {
		i = encodeVarintGobench(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x50
	}
	if m.Ord != 0 {
		i = encodeVarintGobench(dAtA, i, uint64(m.Ord))
		i--
		dAtA[i] = 0x48
	}
	if m.Measured != 0 {
		i = encodeVarintGobench(dAtA, i, uint64(m.Measured))
		i--
		dAtA[i] = 0x40
	}
	if m.MbPerSecond != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MbPerSecond))))
		i--
		dAtA[i] = 0x39
	}
	if m.BytesAllocatedPerOp != 0 {
		i = encodeVarintGobench(dAtA, i, uint64(m.BytesAllocatedPerOp))
		i--
		dAtA[i] = 0x30
	}
	if m.AllocPerOp != 0 {
		i = encodeVarintGobench(dAtA, i, uint64(m.AllocPerOp))
		i--
		dAtA[i] = 0x28
	}
	if m.NsPerOp != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.NsPerOp))))
		i--
		dAtA[i] = 0x21
	}
	if m.NOp != 0 {
		i = encodeVarintGobench(dAtA, i, uint64(m.NOp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGobench(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Package) > 0 {
		i -= len(m.Package)
		copy(dAtA[i:], m.Package)
		i = encodeVarintGobench(dAtA, i, uint64(len(m.Package)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GoBenchmarkReportResultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoBenchmarkReportResultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoBenchmarkReportResultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndTime != 0 {
		i = encodeVarintGobench(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x28
	}
	if m.StartTime != 0 {
		i = encodeVarintGobench(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGobench(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Package) > 0 {
		i -= len(m.Package)
		copy(dAtA[i:], m.Package)
		i = encodeVarintGobench(dAtA, i, uint64(len(m.Package)))
		i--
		dAtA[i] = 0x12
	}
	if m.JobId != 0 {
		i = encodeVarintGobench(dAtA, i, uint64(m.JobId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGobench(dAtA []byte, offset int, v uint64) int {
	offset -= sovGobench(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GoBenchmarkSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Package)
	if l > 0 {
		n += 1 + l + sovGobench(uint64(l))
	}
	if m.Server != nil {
		l = m.Server.Size()
		n += 1 + l + sovGobench(uint64(l))
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovGobench(uint64(l))
	}
	if m.Report != nil {
		l = m.Report.Size()
		n += 1 + l + sovGobench(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoBenchmarkCommandSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovGobench(uint64(l))
	}
	l = len(m.Output)
	if l > 0 {
		n += 1 + l + sovGobench(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoBenchmarkReportSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovGobench(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoBenchmarkResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Package)
	if l > 0 {
		n += 1 + l + sovGobench(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGobench(uint64(l))
	}
	if m.NOp != 0 {
		n += 1 + sovGobench(uint64(m.NOp))
	}
	if m.NsPerOp != 0 {
		n += 9
	}
	if m.AllocPerOp != 0 {
		n += 1 + sovGobench(uint64(m.AllocPerOp))
	}
	if m.BytesAllocatedPerOp != 0 {
		n += 1 + sovGobench(uint64(m.BytesAllocatedPerOp))
	}
	if m.MbPerSecond != 0 {
		n += 9
	}
	if m.Measured != 0 {
		n += 1 + sovGobench(uint64(m.Measured))
	}
	if m.Ord != 0 {
		n += 1 + sovGobench(uint64(m.Ord))
	}
	if m.Duration != 0 {
		n += 1 + sovGobench(uint64(m.Duration))
	}
	if m.Cpu != 0 {
		n += 1 + sovGobench(uint64(m.Cpu))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoBenchmarkReportResultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JobId != 0 {
		n += 1 + sovGobench(uint64(m.JobId))
	}
	l = len(m.Package)
	if l > 0 {
		n += 1 + l + sovGobench(uint64(l))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovGobench(uint64(l))
		}
	}
	if m.StartTime != 0 {
		n += 1 + sovGobench(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovGobench(uint64(m.EndTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGobench(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGobench(x uint64) (n int) {
	return sovGobench(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GoBenchmarkSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGobench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoBenchmarkSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoBenchmarkSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Package", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGobench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGobench
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGobench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Package = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGobench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGobench
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGobench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Server == nil {
				m.Server = &ServerTarget{}
			}
			if err := m.Server.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGobench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGobench
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGobench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &GoBenchmarkCommandSpec{}
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGobench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGobench
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGobench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Report == nil {
				m.Report = &GoBenchmarkReportSpec{}
			}
			if err := m.Report.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGobench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGobench
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGobench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoBenchmarkCommandSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGobench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoBenchmarkCommandSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoBenchmarkCommandSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGobench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGobench
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGobench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGobench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGobench
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGobench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGobench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGobench
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGobench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoBenchmarkReportSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGobench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoBenchmarkReportSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoBenchmarkReportSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGobench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGobench
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGobench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGobench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGobench
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGobench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoBenchmarkResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGobench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoBenchmarkResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoBenchmarkResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Package", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGobench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGobench
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGobench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Package = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGobench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGobench
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGobench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NOp", wireType)
			}
			m.NOp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGobench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NOp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsPerOp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.NsPerOp = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocPerOp", wireType)
			}
			m.AllocPerOp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGobench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocPerOp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesAllocatedPerOp", wireType)
			}
			m.BytesAllocatedPerOp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGobench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesAllocatedPerOp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MbPerSecond", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MbPerSecond = float64(math.Float64frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Measured", wireType)
			}
			m.Measured = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGobench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Measured |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ord", wireType)
			}
			m.Ord = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGobench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ord |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGobench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			m.Cpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGobench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cpu |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGobench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGobench
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGobench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoBenchmarkReportResultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGobench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoBenchmarkReportResultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoBenchmarkReportResultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			m.JobId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGobench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Package", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGobench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGobench
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGobench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Package = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGobench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGobench
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGobench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &GoBenchmarkResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGobench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGobench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGobench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGobench
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGobench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGobench(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGobench
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGobench
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGobench
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGobench
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGobench
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGobench
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGobench        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGobench          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGobench = fmt.Errorf("proto: unexpected end of group")
)
