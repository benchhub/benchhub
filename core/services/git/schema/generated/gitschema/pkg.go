// Code generated by tqbuilder from github.com/benchhub/benchhub/core/services/git/schema/ddl DO NOT EDIT.

package gitschema

import (
	"github.com/benchhub/benchhub/lib/tqbuilder/sql/ddl"
)

// ----------------------------------------------------------------------------
// GitOwner

var GitOwner = newGitOwner()

// GitOwnerTable is generated from table git_owners
type GitOwnerTable struct {
	Id     ddl.ColumnDef // id
	Type   ddl.ColumnDef // type
	HostId ddl.ColumnDef // host_id
	Name   ddl.ColumnDef // name
}

func newGitOwner() GitOwnerTable {
	return GitOwnerTable{

		Id: ddl.ColumnDef{
			Name: "id",
			// Type: "{INT 0}", // FIXME: need to generate columns properly
		},
		Type: ddl.ColumnDef{
			Name: "type",
			// Type: "{INT 0}", // FIXME: need to generate columns properly
		},
		HostId: ddl.ColumnDef{
			Name: "host_id",
			// Type: "{INT 0}", // FIXME: need to generate columns properly
		},
		Name: ddl.ColumnDef{
			Name: "name",
			// Type: "{VARCHAR 255}", // FIXME: need to generate columns properly
		},
	}
}

// ----------------------------------------------------------------------------
// GitRepo

var GitRepo = newGitRepo()

// GitRepoTable is generated from table git_repos
type GitRepoTable struct {
	Id       ddl.ColumnDef // id
	Type     ddl.ColumnDef // type
	OwnerId  ddl.ColumnDef // owner_id
	Owner    ddl.ColumnDef // owner
	Name     ddl.ColumnDef // name
	Goimport ddl.ColumnDef // goimport
}

func newGitRepo() GitRepoTable {
	return GitRepoTable{

		Id: ddl.ColumnDef{
			Name: "id",
			// Type: "{INT 0}", // FIXME: need to generate columns properly
		},
		Type: ddl.ColumnDef{
			Name: "type",
			// Type: "{INT 0}", // FIXME: need to generate columns properly
		},
		OwnerId: ddl.ColumnDef{
			Name: "owner_id",
			// Type: "{INT 0}", // FIXME: need to generate columns properly
		},
		Owner: ddl.ColumnDef{
			Name: "owner",
			// Type: "{VARCHAR 255}", // FIXME: need to generate columns properly
		},
		Name: ddl.ColumnDef{
			Name: "name",
			// Type: "{VARCHAR 255}", // FIXME: need to generate columns properly
		},
		Goimport: ddl.ColumnDef{
			Name: "goimport",
			// Type: "{VARCHAR 1024}", // FIXME: need to generate columns properly
		},
	}
}
